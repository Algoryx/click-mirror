# This example demonstrates how to add Attachments and Connectors to a model. When this have
# been added, Brick will automatically try to position and align the bodies to make the joint
# equations be satisfied at the start of the simulation.

.format: 4

# Use imports to avoid having two write the whole name of the component
.import:
  MyRobot: [ToolRobot]

MyScenePosition:
  .extends: Physics.Component
  wantInternalPositioning: true

  robot1:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(-0.25, 3.45, 0.55)
      rotation: Math.EulerAngles(0, 0, 2.35)

    arm1:
      joint0:
        protocolReference: robot1_joint0
      joint1:
        protocolReference: robot1_joint1


  robot2:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(0, -0.45, 0.45)
      rotation: Math.EulerAngles(0, -0, -0.75)
  
    arm1:
      joint0:
        protocolReference: robot2_joint0
      joint1:
        protocolReference: robot2_joint1

  # box: 
  #   .type: PythonApplicationModels.BoxPile.ExampleBox
  #   localTransform:
  #     position: Math.Vec3(1, 2, 3)
  #     rotation: Math.EulerAngles(2, 1, 1)


MySceneVelocity:
  .extends: Physics.Component
  wantInternalPositioning: true

  robot1:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(-0.25, 3.45, 0.55)
      rotation: Math.EulerAngles(0, 0, 2.35)

    arm1:
      joint0:
        inputSignalType: Robotics.SignalType.InputVelocitySignal
        protocolReference: robot1_joint0
      joint1:
        inputSignalType: Robotics.SignalType.InputVelocitySignal
        protocolReference: robot1_joint1

  robot2:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(0, -0.45, 0.45)
      rotation: Math.EulerAngles(0, -0, -0.75)

    arm1:
      joint0:
        inputSignalType: Robotics.SignalType.InputVelocitySignal
        protocolReference: robot2_joint0
      joint1:
        inputSignalType: Robotics.SignalType.InputVelocitySignal
        protocolReference: robot2_joint1


MySceneForce:
  .extends: Physics.Component
  wantInternalPositioning: true

  robot1:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(-0.25, 3.45, 0.55)
      rotation: Math.EulerAngles(0, 0, 2.35)

    arm1:
      joint0:
        inputSignalType: Robotics.SignalType.InputForceSignal
        protocolReference: robot1_joint0
      joint1:
        inputSignalType: Robotics.SignalType.InputForceSignal
        protocolReference: robot1_joint1
 

  robot2:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(0, -0.45, 0.45)
      rotation: Math.EulerAngles(0, -0, -0.75)

    arm1:
      joint0:
        inputSignalType: Robotics.SignalType.InputForceSignal
        protocolReference: robot2_joint0
      joint1:
        inputSignalType: Robotics.SignalType.InputForceSignal
        protocolReference: robot2_joint1

MyScenePositionVelocityForce:
  .extends: Physics.Component
  wantInternalPositioning: true

  robot1:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(-0.25, 3.45, 0.55)
      rotation: Math.EulerAngles(0, 0, 2.35)

    arm1:
      joint0:
        inputSignalType: Robotics.SignalType.InputPositionSignal
        protocolReference: robot1_joint0
      joint1:
        inputSignalType: Robotics.SignalType.InputVelocitySignal
        protocolReference: robot1_joint1
 

  robot2:
    .type: ToolRobot
    localTransform:
      position: Math.Vec3(0, -0.45, 0.45)
      rotation: Math.EulerAngles(0, -0, -0.75)

    arm1:
      joint0:
        inputSignalType: Robotics.SignalType.InputPositionSignal
        protocolReference: robot2_joint0
      joint1:
        inputSignalType: Robotics.SignalType.InputForceSignal
        protocolReference: robot2_joint1
