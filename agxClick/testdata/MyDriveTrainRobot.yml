.format: 4
# Testdata for DriveTrainJoint: A robot with one force and one velocity driven drivetrain joint

.import:
  Robotics: [Robot, RobotArm, Segment, RobotBase, Joint, HingeJoint, SignalType, Sensor]
  Physics.Mechanics: [RigidBodyAttachment, HingeConnector, LockJointConnector]
  Physics.Mechanics.HingeConnector: [RotationalActuatorHingeConnector]
  Physics.DriveTrain: [RotatingBody1D,RotatingShaft, GearAttachment, FixedVelocityEngine, TorqueDrivenEngine, GearConnector, HolonomicGearConnector]
  MyRobot: [MySegment, MyRobotBase, RobotJoint]

# disable lock and motor of the connector
# to let the drive train gear drive each joint
HingePreparedForDriveTrain:
  .extends: RotationalActuatorHingeConnector
  angle: 0
  rotationalFrictionCoefficient: 0.0
  staticFrictionRotational:
    minForce: -0.1
    maxForce: 0.1
  lock:
    minForce: 0
    maxForce: 0
  motor:
    minForce: 0
    maxForce: 0

# Declare a template for a drive train joint
# This need to have both an engine and a gear
# However, whether we like torque or velocity control,
# the engine and input signal types are not defined yet
DriveTrainJointTemplate:
  .extends: RobotJoint
  inputSignalType: Robotics.SignalType.InputForceSignal
  attachmentStiffness:
    defaultValue: 100000000
  attachmentDamping:
    defaultValue: 3300000
  hingeConnector: 
    .value: HingePreparedForDriveTrain
    shaft: this.inputShaft
  inputShaft:
    .type: RotatingShaft
    massProperties:
      inertia: 0.1
  engine:
    .type: RotatingBody1D 
  inputSignal:
    .type: Signal.SignalBase
  gear:
    .type: HolonomicGearConnector

# Declare a drive train joint with a TorqueDrivenEngine
# The input signal is then a EngineTorqueInput signal
# Which will be found in the joint initialization
# and replace the default input signal
DriveTrainJointTorque:
  .extends: DriveTrainJointTemplate
  engine:
    .value: TorqueDrivenEngine
    initialTorque: 1
  inputSignal:
    .value: Signal.EngineTorqueInput
    engine: this.engine
  gear:
    attachment1: this.engine.outputAttachment
    attachment2: this.inputShaft.inputAttachment
    interaction:
      gearRatio: 10

# Declare a drive train joint with a FixedVelocityEngine
# The input signal is then a FixedVelocityEngineInput signal
# Which will be found in the joint initialization
# and replace the default input signal
DriveTrainJointVelocity:
  .extends: DriveTrainJointTemplate
  engine:
    .value: FixedVelocityEngine
    targetRPM: 1
  inputSignal:
    .value: Signal.FixedVelocityEngineInput
    engine: this.engine
  gear:
    attachment1: this.engine.outputAttachment
    attachment2: this.inputShaft.inputAttachment
    interaction:
      stiffness: 1000
      damping: 10
      gearRatio: 10

# Create a robot arm with one velocity driven and one torque driven joint
MyArm:
  .extends: RobotArm
  wantInternalPositioning: true

  joint0:
    .type: DriveTrainJointVelocity

  joint1:
    .type: DriveTrainJointTorque
    segment1: this.segment1
    segment2: this.segment2

  segment1:
    .type: MySegment
    body:
      name: segment1

  segment2:
    .type: MySegment
    body:
      name: segment2




# Build a robot with the robot arm
MyDriveTrainRobot:
  .extends: Robot
  wantInternalPositioning: true

  base:
    .value: MyRobotBase

  arm:
    .type: MyArm
    .value: MyArm

    joint0:
      segment1: this.base
      segment2: this.arm.segment1

  worldAttachment:
    .type: Physics.Mechanics.LockJointAttachment
    .value: Physics.Mechanics.LockJointAttachment
    localTransform:
      rotation: Quat.TryFromToZXPair(Vec3(0,1,0),Vec3(0,0,1))

  worldConnector:
    .type: Physics.Mechanics.PrismaticConnector
    attachment1: this.base.inputAttachment
    attachment2: this.worldAttachment
    motor:
      speed: 0
      constrainDof: true

