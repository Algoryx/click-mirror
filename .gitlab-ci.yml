stages:
  - prebuild
  - build
  - test
  - publish

.docker-vars:
  variables:
    CI_IMAGE_TAG: 0.0.5

variables:
  PACKAGE_VERSION: $CI_COMMIT_TAG

.run-in-docker:
  extends: .docker-vars
  image: $CI_REGISTRY_IMAGE/docker-ci:20.04_${CI_IMAGE_TAG}
  tags:
    - linux
    - docker
#  services:
    # configure a registry mirror https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#    - docker:dind

.build-docker:
  extends: .docker-vars
  tags:
    - linux
    - docker-host
  before_script:
    - echo $CI_PIPELINE_SOURCE $CI ${CI_COMMIT_REF_SLUG} $CI_REGISTRY_IMAGE
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY


.build_and_push: &build-and-push
  - export DOCKER_IMAGE=$CI_REGISTRY_IMAGE/$IMAGE_NAME:$DOCKER_IMAGE_TAG
  - echo Building $DOCKER_IMAGE from $DOCKER_FILE
  - docker build --pull --cache-from $DOCKER_IMAGE -t $DOCKER_IMAGE --build-arg UBUNTU_VERSION=${UBUNTU_VERSION} -f $DOCKER_FILE .
  - docker push $DOCKER_IMAGE


build-docker-ci-20.04:
  extends: .build-docker
  image: docker:latest
  stage: prebuild
  variables:
    UBUNTU_VERSION: 20.04
  script:
    - cd docker
    - export DOCKER_FILE=Dockerfile.CI
    - export IMAGE_NAME=docker-ci
    - export DOCKER_IMAGE_TAG=${UBUNTU_VERSION}_${CI_IMAGE_TAG}
    - *build-and-push
  only:
    changes:
      - .gitlab-ci.yml
      - docker/Dockerfile.CI

build-docker-ci-22.04:
  extends: build-docker-ci-20.04
  variables:
    UBUNTU_VERSION: 22.04

build-docker-ci-24.04:
  extends: build-docker-ci-20.04
  variables:
    UBUNTU_VERSION: 24.04

build-cpp-lib-linux-20.04:
  extends: .run-in-docker
  stage: build
  script:
    - cmake -B oos -DCMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=oos/install -DCMAKE_GENERATOR=Ninja -DCPACK_GENERATOR=DEB $EXTRA_PARAMS cpp-src
    - cd oos
    - ninja
    - ninja install
    - ninja package
    - cmake -DCMAKE_BUILD_TYPE=Debug .
    - ninja
    - ninja install
  artifacts:
    paths:
      - oos/install
      - oos/bin
      - oos/click*Linux.deb
      - oos/protobuf-gen/Messaging*

build-shared-cpp-lib-linux-20.04:
  extends: build-cpp-lib-linux-20.04
  variables:
    EXTRA_PARAMS: "-DBUILD_SHARED_LIBS=ON"

.test-cpp-lib-linux-20.04:
  extends: .run-in-docker
  stage: test
  script:
    - oos/bin/click-tests --reporter junit --out catch2-junit.xml

  artifacts:
    when: always
    reports:
      junit: catch2-junit.xml

test-cpp-lib-linux-20.04:
  extends: .test-cpp-lib-linux-20.04
  needs:
    - job: build-cpp-lib-linux-20.04
      artifacts: true

test-shared-cpp-lib-linux-20.04:
  extends: .test-cpp-lib-linux-20.04
  variables:
    LD_LIBRARY_PATH: "${CI_PROJECT_DIR}/oos/install/lib"
  needs:
    - job: build-shared-cpp-lib-linux-20.04
      artifacts: true

.publish-cpp-lib-linux:
  extends: .run-in-docker
  stage: publish
  script:
    - grep "click VERSION $PACKAGE_VERSION" cpp-src/CMakeLists.txt
    - cd oos
    - PACKAGE_NAME=`ls click-*.deb`
    - echo Publishing $PACKAGE_NAME as ${PACKAGE_VERSION}/${PACKAGE_UPLOAD_NAME} and latest/${PACKAGE_UPLOAD_NAME}
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/${PACKAGE_VERSION}/${PACKAGE_UPLOAD_NAME}"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/latest/${PACKAGE_UPLOAD_NAME}"'
    # Publish click to conan.algoryx.se
    - cd ../cpp-src/click
    - conan create . algoryx/stable -pr:b=default
    - conan user $CONAN_USERNAME -p $CONAN_PASSWORD -r algoryx
    - conan upload --all click/${PACKAGE_VERSION}@algoryx/stable
  only:
    - tags

# Conan 1 builds

.conan1-create-ubuntu:
  extends: .run-in-docker
  stage: build
  image: $CI_REGISTRY_IMAGE/docker-ci:${UBUNTU_VERSION}_${CI_IMAGE_TAG}
  script:
    - cd cpp-src/click
    - conan create . algoryx/stable -pr:b=default --build=missing
  only:
    - tags

20.04-conan1-create:
  extends: .conan1-create-ubuntu
  variables:
    UBUNTU_VERSION: 20.04

22.04-conan1-create:
  extends: .conan1-create-ubuntu
  variables:
    UBUNTU_VERSION: 22.04

24.04-conan1-create:
  extends: .conan1-create-ubuntu
  variables:
    UBUNTU_VERSION: 24.04

.conan1-on-mac:
  variables:
    CONAN_USER_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
  before_script:
    - conan profile show default || conan profile new --detect default
    - conan profile update env.CC="ccache clang" default
    - conan profile update env.CXX="ccache clang++" default
    - conan profile update settings.compiler=apple-clang default
    - conan profile update settings.compiler.version=13 default
    - conan profile update settings.compiler.libcxx=libc++ default
    # We support 11.0+
    - conan profile update settings.os.version=11.0 default
    - conan remote add algoryx https://conan.algoryx.se --force
  only:
    - tags

mac-arm-conan1-create:
  stage: build
  extends: .conan1-on-mac
  tags:
    - mac-arm
  script:
    - cd cpp-src/click
    - conan create . algoryx/stable -pr:b=default --build=missing

intel-arm-conan1-create:
  extends: mac-arm-conan1-create
  tags:
    - mac-intel

win-vs2019-conan1-create:
  stage: build
  tags:
    - windows
    - x64
    - vs2019
  variables:
    # Use project specific conan directory to cache between builds but not between projects
    CONAN_USER_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
    GENERATOR: "Visual Studio 16 2019"
    COMPILER_VERSION: "16"
  script:
    - cd cpp-src/click
    - conan create . algoryx/stable -pr:b=default --build=missing -s compiler.version=${COMPILER_VERSION}
  only:
    - tags

# Disabled for now, works with conan 2 but not conan 1 for libsodium
.win-vs2022-conan1-create:
  extends: win-vs2019-conan1-create
  variables:
    # Use project specific conan directory to cache between builds but not between projects
    CONAN_USER_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
    GENERATOR: "Visual Studio 17 2022"
    COMPILER_VERSION: "17"
  tags:
    - vs2022

# End of Conan 1 builds

# Conan 2 builds

.conan2-create-ubuntu:
  extends: .run-in-docker
  stage: build
  image: $CI_REGISTRY_IMAGE/docker-ci:${UBUNTU_VERSION}_${CI_IMAGE_TAG}
  before_script:
    - python3 -m venv venv
    - source venv/bin/activate
    - pip3 install conan>=2
    - conan profile show || conan profile detect --force
    - conan remote add algoryx https://conan.algoryx.se --force
  script:
    - cd cpp-src/click
    - conan create . --channel "stable" --user algoryx -pr:b=default --build=missing
    - echo $CONAN_PASSWORD | conan remote login algoryx $CONAN_USERNAME -p
    - conan upload click/${PACKAGE_VERSION}@algoryx/stable --remote algoryx
  only:
    - tags

20.04-conan2-create:
  extends: .conan2-create-ubuntu
  variables:
    UBUNTU_VERSION: 20.04

22.04-conan2-create:
  extends: .conan2-create-ubuntu
  variables:
    UBUNTU_VERSION: 22.04

24.04-conan2-create:
  extends: .conan2-create-ubuntu
  variables:
    UBUNTU_VERSION: 24.04

.conan2-on-mac:
  variables:
    CONAN_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
  before_script:
    - python3 -m venv venv
    - source venv/bin/activate
    - pip3 install conan>=2
    - conan profile show || conan profile detect --force
    # conan2 does not support profile update
    # - conan profile update env.CC="ccache clang" default
    # - conan profile update env.CXX="ccache clang++" default
    # We support 11.0+
    # - conan profile update settings.os.version=11.0 default
    - conan remote add algoryx https://conan.algoryx.se --force
  only:
    - tags

mac-arm-conan2-create:
  stage: build
  extends: .conan2-on-mac
  tags:
    - mac-arm
  script:
    - cd cpp-src/click
    - conan create . --channel "stable" --user algoryx -pr:b=default --build=missing
    - echo $CONAN_PASSWORD | conan remote login algoryx $CONAN_USERNAME
    - conan upload click/${PACKAGE_VERSION}@algoryx/stable --remote algoryx

intel-arm-conan2-create:
  extends: mac-arm-conan2-create
  tags:
    - mac-intel

win-vs2019-conan2-create:
  stage: build
  tags:
    - windows
    - x64
    - vs2019
  variables:
    # Use project specific conan directory to cache between builds but not between projects
    CONAN_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
    GENERATOR: "Visual Studio 16 2019"
    COMPILER_VERSION: 192 # 16
  before_script:
    - python -m venv venv
    - .\venv\Scripts\activate
    - pip install conan>=2
    - conan --version
    - echo ${CONAN_HOME}
    - conan profile detect --force
    - conan remote add algoryx https://conan.algoryx.se --force
  script:
    - cd cpp-src/click
    - conan create . --channel "stable" --user algoryx -pr:b=default --build=missing -s compiler.version=${COMPILER_VERSION}
    - conan remote login algoryx $CONAN_USERNAME -p $CONAN_PASSWORD
    - conan upload click/${PACKAGE_VERSION}@algoryx/stable --remote algoryx
  only:
    - tags

win-vs2022-conan2-create:
  extends: win-vs2019-conan2-create
  variables:
    # Use project specific conan directory to cache between builds but not between projects
    CONAN_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
    GENERATOR: "Visual Studio 17 2022"
    COMPILER_VERSION: 193 # 17
  tags:
    - vs2022

# End of Conan 2 builds

publish-cpp-lib-linux:
  extends: .publish-cpp-lib-linux
  variables:
    PACKAGE_UPLOAD_NAME: click-static-focal-amd64.deb
  needs:
    - job: build-cpp-lib-linux-20.04
      artifacts: true

publish-shared-cpp-lib-linux:
  extends: .publish-cpp-lib-linux
  variables:
    PACKAGE_UPLOAD_NAME: click-shared-focal-amd64.deb
  needs:
    - job: build-shared-cpp-lib-linux-20.04
      artifacts: true

test-python-lib:
  extends: .run-in-docker
  stage: test
  script:
    - cd python-src
    - (poetry install && poetry run pytest --junitxml=pclick-junit.xml)
  artifacts:
    when: always
    reports:
      junit: pclick-junit.xml

.publish-python-lib:
  extends: .run-in-docker
  stage: publish
  script:
    - cd $PYTHONDIR
    - poetry publish --build --username=__token__ --password=${pypi_password}
  only:
    - tags

publish-pclick:
  extends: .publish-python-lib
  variables:
    PYTHONDIR: python-src

.build-test-cpp-lib-windows:
  stage: build
  tags:
    - windows
    - x64
    - vs2019
  variables:
    # Use project specific conan directory to cache between builds but not between projects
    CONAN_USER_HOME: $CI_BUILDS_DIR/conan-ci/$CI_PROJECT_PATH_SLUG
  script:
    - cmake -B oos -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=oos/install -G "Visual Studio 16 2019" -A $TARGET_ARCH $EXTRA_PARAMS cpp-src
    - cmake --build oos --target INSTALL --config Debug
    - cmake -D CMAKE_BUILD_TYPE=Release oos
    - cmake --build oos --target INSTALL --config Release
    - oos/bin/click-tests --reporter junit --out win-catch2-junit.xml
    # Make sure conan create builds
    - cd cpp-src/click
    - conan create . algoryx/stable -pr:b=default --build=missing -s compiler.version=16

  artifacts:
    paths:
      - oos/install
      - oos/bin
    when: always
    reports:
      junit: oos/win-catch2-junit.xml


build-test-x64-cpp-lib-windows:
  extends: .build-test-cpp-lib-windows
  variables:
    TARGET_ARCH: "x64"
    EXTRA_PARAMS: "-DBUILD_SHARED_LIBS=ON"

.publish-cpp-lib-windows:
  extends: .run-in-docker
  stage: publish
  script:
    - find oos
    - PACKAGE_VERSION=$CI_COMMIT_TAG
    - PACKAGE_NAME=$PACKAGE_UPLOAD_NAME-$PACKAGE_VERSION.zip
    - echo Publishing $PACKAGE_NAME as ${PACKAGE_VERSION}/${PACKAGE_UPLOAD_NAME} and latest/${PACKAGE_UPLOAD_NAME}
    - zip -r $PACKAGE_NAME oos doc LICENSE README.md
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/${PACKAGE_VERSION}/${PACKAGE_NAME}"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/latest/${PACKAGE_NAME}"'
  only:
    - tags

publish-x64-cpp-lib-windows:
  extends: .publish-cpp-lib-windows
  variables:
    PACKAGE_UPLOAD_NAME: click-x64
  needs:
    - job: build-test-x64-cpp-lib-windows
      artifacts: true

push-main-to-github:
  extends: .run-in-docker
  stage: build
  script:
    - git remote add mirror git@github.com:Algoryx/click-mirror.git || echo remote mirror already exists.
    - eval "$(ssh-agent -s)"
    - chmod 0600 ${click_github_push_key} # Must be protected to add (and end with a newline)
    - ssh-add ${click_github_push_key}
    # CI_COMMIT_REF_NAME - The branch or tag name for which project is built
    - git push mirror refs/remotes/origin/${CI_COMMIT_REF_NAME}:refs/heads/${CI_COMMIT_REF_NAME}
  only:
    - main

push-tag-to-github:
  extends: .run-in-docker
  stage: build
  script:
    - git remote add mirror git@github.com:Algoryx/click-mirror.git || echo remote mirror already exists.
    - eval "$(ssh-agent -s)"
    - chmod 0600 ${click_github_push_key} # Must be protected to add (and end with a newline)
    - ssh-add ${click_github_push_key}
    # CI_COMMIT_REF_NAME - The branch or tag name for which project is built
    - git push mirror ${CI_COMMIT_REF_NAME}
  only:
    - tags
