stages:
  - prebuild
  - build
  - build2
  - test
  - publish

.run-in-docker:
  tags:
    - linux
    - docker
#  services:
    # configure a registry mirror https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#    - docker:dind

.build-docker:
  tags:
    - linux
    - docker-host
  before_script:
    - echo $CI_PIPELINE_SOURCE $CI ${CI_COMMIT_REF_SLUG} $CI_REGISTRY_IMAGE
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY


.build_and_push: &build-and-push
  - export DOCKER_IMAGE=$CI_REGISTRY_IMAGE/$IMAGE_NAME:$DOCKER_IMAGE_TAG
  - echo Building $DOCKER_IMAGE from $DOCKER_FILE
  - docker build --pull -t $DOCKER_IMAGE --build-arg DOCKER_IMAGE_TAG -f $DOCKER_FILE .
  - docker push $DOCKER_IMAGE


build-docker-ci:
  extends: .build-docker
  image: docker:latest
  stage: prebuild
  script:
    - cd docker
    - export DOCKER_FILE=Dockerfile.CI
    - export IMAGE_NAME=docker-ci
    - export DOCKER_IMAGE_TAG=latest
    - *build-and-push
  only:
    changes:
      - .gitlab-ci.yml
      - docker/Dockerfile.CI


# The license is copied from https://git.algoryx.se/algoryx/agx/-/blob/master/data/cfg/agx.lic to secret build variable agx_lic
# If this job fails that means the license must be updated
test-license:
  extends: .run-in-docker
  stage: prebuild
  image: $CI_REGISTRY/algoryx/external/agx-docker/agxbrick-minified:latest
  script:
    - cp ${agx_lic} ${AGX_DATA_DIR}/cfg/agx.lic
    - agxViewer --agxOnly --stopAfterFrame 1


build-cpp-lib-linux:
  extends: .run-in-docker
  stage: build
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=./install -DCMAKE_GENERATOR=Ninja -DCPACK_GENERATOR=DEB $EXTRA_PARAMS ../cpp-src
    - ninja
    - ninja install
    - ninja package
    - cmake -DCMAKE_BUILD_TYPE=Debug .
    - ninja
    - ninja install
  artifacts:
    paths:
      - build/install
      - build/bin
      - build/click*Linux.deb

build-shared-cpp-lib-linux:
  extends: build-cpp-lib-linux
  variables:
    EXTRA_PARAMS: "-DBUILD_SHARED_LIBS=ON"

.test-cpp-lib-linux:
  extends: .run-in-docker
  stage: test
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - build/bin/click-tests --reporter junit --out catch2-junit.xml
  artifacts:
    when: always
    reports:
      junit: catch2-junit.xml

test-cpp-lib-linux:
  extends: .test-cpp-lib-linux
  needs:
    - job: build-cpp-lib-linux
      artifacts: true

test-shared-cpp-lib-linux:
  extends: .test-cpp-lib-linux
  variables:
    LD_LIBRARY_PATH: "${CI_PROJECT_DIR}/build/install/lib"
  needs:
    - job: build-shared-cpp-lib-linux
      artifacts: true

.publish-cpp-lib-linux:
  extends: .run-in-docker
  stage: publish
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - PACKAGE_VERSION=$CI_COMMIT_TAG
    - grep "click VERSION $PACKAGE_VERSION" cpp-src/CMakeLists.txt
    - cd build
    - PACKAGE_NAME=`ls click-*.deb`
    - echo Publishing $PACKAGE_NAME as ${PACKAGE_VERSION}/${PACKAGE_UPLOAD_NAME} and latest/${PACKAGE_UPLOAD_NAME}
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/${PACKAGE_VERSION}/${PACKAGE_UPLOAD_NAME}"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/latest/${PACKAGE_UPLOAD_NAME}"'
  only:
    - tags

publish-cpp-lib-linux:
  extends: .publish-cpp-lib-linux
  variables:
    PACKAGE_UPLOAD_NAME: click-static-focal-amd64.deb
  needs:
    - job: build-cpp-lib-linux
      artifacts: true

publish-shared-cpp-lib-linux:
  extends: .publish-cpp-lib-linux
  variables:
    PACKAGE_UPLOAD_NAME: click-shared-focal-amd64.deb
  needs:
    - job: build-shared-cpp-lib-linux
      artifacts: true

.build-python:
  extends: .run-in-docker
  stage: build
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - cd $PYTHONDIR
    - pip3 install -r requirements-publish.txt
    - python3 setup.py sdist bdist_wheel
  artifacts:
    paths:
      - $PYTHONDIR/dist/

build-python-lib:
  extends: .build-python
  variables:
    PYTHONDIR: python-src
  
build-agxClick:
  extends: .build-python
  variables:
    PYTHONDIR: agxClick

test-python-lib:
  extends: .run-in-docker
  stage: test
  image: $CI_REGISTRY_IMAGE/docker-ci
  needs:
    - job: build-python-lib
      artifacts: true
  script:
    - pip3 install -r python-src/requirements-test.txt
    - pip3 install python-src/dist/pClick*whl
    - pytest python-src --junitxml=pClick-junit.xml
  artifacts:
    when: always
    reports:
      junit: pClick-junit.xml

test-agxClick:
  extends: .run-in-docker
  stage: test
  image: $CI_REGISTRY/algoryx/external/agx-docker/agxbrick-minified:agx-2.32.1.0_agxbrick-0.5.7
  needs:
    - job: build-python-lib
      artifacts: true
    - job: build-agxClick
      artifacts: true
  script:
    - cp ${agx_lic} ${AGX_DATA_DIR}/cfg/agx.lic
    - pip3 install -r python-src/requirements-test.txt
    - pip3 install python-src/dist/pClick*whl
    - pip3 install agxClick/dist/agxClick*whl
    - pytest agxClick --junitxml=agxClick-junit.xml
  artifacts:
    when: always
    reports:
      junit: agxClick-junit.xml

.publish-python-lib:
  extends: .run-in-docker
  stage: publish
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - cd $PYTHONDIR
    - pip3 install -r requirements-publish.txt
    - PACKAGE_VERSION=$CI_COMMIT_TAG
    - grep 'version="'${PACKAGE_VERSION}'"' setup.py
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*${PACKAGE_VERSION}*
  only:
    - tags

publish-pClick:
  extends: .publish-python-lib
  variables:
    PYTHONDIR: python-src
  needs:
    - job: build-python-lib
      artifacts: true
    - job: test-python-lib

publish-agxClick:
  extends: .publish-python-lib
  variables:
    PYTHONDIR: agxClick
  needs:
    - job: build-agxClick
      artifacts: true
    - job: test-agxClick

.build-test-cpp-lib-windows:
  stage: build
  tags:
    - windows
    - vs2019
  script:
    - mkdir build
    - cd build
    - cmake -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=./install -G "Visual Studio 16 2019" -A $TARGET_ARCH $EXTRA_PARAMS ../cpp-src
    - cmake --build . --target INSTALL --config Debug
    - cmake -D CMAKE_BUILD_TYPE=Release .
    - cmake --build . --target INSTALL --config Release
    - bin/click-tests --reporter junit --out win-catch2-junit.xml
  artifacts:
    paths:
      - build/install
      - build/bin
    when: always
    reports:
      junit: build/win-catch2-junit.xml


build-test-x64-cpp-lib-windows:
  extends: .build-test-cpp-lib-windows
  variables:
    TARGET_ARCH: "x64"
    EXTRA_PARAMS: "-DBUILD_SHARED_LIBS=ON"

build-test-static-Win32-cpp-lib-windows:
  extends: .build-test-cpp-lib-windows
  variables:
    TARGET_ARCH: "Win32"

build-test-dynamic-Win32-cpp-lib-windows:
  extends: .build-test-cpp-lib-windows
  variables:
    TARGET_ARCH: "Win32"
    EXTRA_PARAMS: "-DBUILD_SHARED_LIBS=ON"

.publish-cpp-lib-windows:
  extends: .run-in-docker
  stage: publish
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - find build
    - PACKAGE_VERSION=$CI_COMMIT_TAG
    - PACKAGE_NAME=$PACKAGE_UPLOAD_NAME-$PACKAGE_VERSION.zip
    - echo Publishing $PACKAGE_NAME as ${PACKAGE_VERSION}/${PACKAGE_UPLOAD_NAME} and latest/${PACKAGE_UPLOAD_NAME}
    - zip -r $PACKAGE_NAME build doc agxClick/examples agxClick/testdata LICENSE agxClick/README.md README.md
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/${PACKAGE_VERSION}/${PACKAGE_NAME}"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PACKAGE_NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/click/latest/${PACKAGE_NAME}"'
  only:
    - tags

publish-dynamic-Win32-cpp-lib-windows:
  extends: .publish-cpp-lib-windows
  variables:
    PACKAGE_UPLOAD_NAME: click-win32
  needs:
    - job: build-test-dynamic-Win32-cpp-lib-windows
      artifacts: true

publish-x64-cpp-lib-windows:
  extends: .publish-cpp-lib-windows
  variables:
    PACKAGE_UPLOAD_NAME: click-x64
  needs:
    - job: build-test-x64-cpp-lib-windows
      artifacts: true
