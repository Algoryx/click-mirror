stages:
  - prebuild
  - build
  - build2
  - test
  - publish

.run-in-docker:
  tags:
    - linux
    - docker
#  services:
    # configure a registry mirror https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#    - docker:dind

.build-docker:
  tags:
    - linux
    - docker-host
  before_script:
    - echo $CI_PIPELINE_SOURCE $CI ${CI_COMMIT_REF_SLUG} $CI_REGISTRY_IMAGE
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY


.build_and_push: &build-and-push
  - export DOCKER_IMAGE=$CI_REGISTRY_IMAGE/$IMAGE_NAME:$DOCKER_IMAGE_TAG
  - echo Building $DOCKER_IMAGE from $DOCKER_FILE
  - docker build --pull -t $DOCKER_IMAGE --build-arg DOCKER_IMAGE_TAG -f $DOCKER_FILE .
  - docker push $DOCKER_IMAGE


build-docker-ci:
  extends: .build-docker
  image: docker:latest
  stage: prebuild
  script:
    - cd docker
    - export DOCKER_FILE=Dockerfile.CI
    - export IMAGE_NAME=docker-ci
    - export DOCKER_IMAGE_TAG=latest
    - *build-and-push
  only:
    changes:
      - .gitlab-ci.yml
      - docker/Dockerfile.CI


build-cpp-lib-linux:
  extends: .run-in-docker
  stage: build
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=./install -DCMAKE_GENERATOR=Ninja -DCPACK_GENERATOR=DEB ../cpp-src
    - ninja
    - ninja install
    - ninja package
    - cmake -DCMAKE_BUILD_TYPE=Debug .
    - ninja
    - ninja install
  artifacts:
    paths:
      - build/install
      - build/bin
      - build/click*Linux.deb


test-cpp-lib-linux:
  extends: .run-in-docker
  stage: test
  image: $CI_REGISTRY_IMAGE/docker-ci
  needs:
    - job: build-cpp-lib-linux
      artifacts: true
  script:
    - build/bin/click-tests --reporter junit --out catch2-junit.xml
  artifacts:
    when: always
    reports:
      junit: catch2-junit.xml


build-python-lib:
  extends: .run-in-docker
  stage: build
  image: $CI_REGISTRY_IMAGE/docker-ci
  script:
    - pip3 install -r python-src/requirements-publish.txt
    - cd python-src
    - python3 setup.py sdist bdist_wheel
  artifacts:
    paths:
      - python-src/dist/

test-python-lib:
  extends: .run-in-docker
  stage: test
  image: $CI_REGISTRY_IMAGE/docker-ci
  needs:
    - job: build-python-lib
      artifacts: true
  script:
    - pip3 install -r python-src/requirements-test.txt
    - pip3 install python-src/dist/pyClick*whl
    - pytest --junitxml=pytest-junit.xml
  artifacts:
    when: always
    reports:
      junit: pytest-junit.xml

publish-python-lib:
  extends: .run-in-docker
  stage: publish
  image: $CI_REGISTRY_IMAGE/docker-ci
  needs:
    - job: build-python-lib
      artifacts: true
  script:
    - pip3 install -r python-src/requirements-publish.txt
    - cd python-src
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --skip-existing --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

.build-cpp-lib-windows:
  stage: build
  tags:
    - windows
    - vs2019
  script:
    - mkdir build
    - cd build
    - cmake -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=./install -G "Visual Studio 16 2019" -A $TARGET_ARCH $EXTRA_PARAMS ../cpp-src
    - cmake --build . --target INSTALL --config Debug
    - cmake -D CMAKE_BUILD_TYPE=Release .
    - cmake --build . --target INSTALL --config Release
  artifacts:
    paths:
      - build/install
      - build/bin

build-x64-cpp-lib-windows:
  extends: .build-cpp-lib-windows
  variables:
    TARGET_ARCH: "x64"

build-static-Win32-cpp-lib-windows:
  extends: .build-cpp-lib-windows
  variables:
    TARGET_ARCH: "Win32"

build-dynamic-Win32-cpp-lib-windows:
  extends: .build-cpp-lib-windows
  variables:
    TARGET_ARCH: "Win32"
    EXTRA_PARAMS: "-DBUILD_SHARED_LIBS=ON"


.test-cpp-lib-windows:
  stage: test
  tags:
    - windows
    - vs2019
  needs:
    - job: build-x64-cpp-lib-windows
      artifacts: true
  script:
    - build/bin/click-tests --reporter junit --out win-catch2-junit.xml
  artifacts:
    when: always
    reports:
      junit: win-catch2-junit.xml

test-x64-cpp-lib-windows:
  extends: .test-cpp-lib-windows
  needs:
    - job: build-x64-cpp-lib-windows
      artifacts: true

test-static-Win32-cpp-lib-windows:
  extends: .test-cpp-lib-windows
  needs:
    - job: build-static-Win32-cpp-lib-windows
      artifacts: true

test-dynamic-Win32-cpp-lib-windows:
  extends: .test-cpp-lib-windows
  needs:
    - job: build-dynamic-Win32-cpp-lib-windows
      artifacts: true
