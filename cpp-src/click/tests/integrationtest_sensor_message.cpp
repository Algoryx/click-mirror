#include <fstream>
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_all.hpp>
#include <click/MessageSerializer.h>
#include <click/SensorMessage.h>

using namespace std;
using namespace algoryx::click;
// https://github.com/catchorg/Catch2/blob/devel/docs/matchers.md#top
using Catch::Matchers::Contains;
using Catch::Matchers::Equals;


SCENARIO("sensormessage serialization from file", "[clicklib]" ) {

    GIVEN("A serialized sensormessage") {

        // This file is created by test_write_sensor_message_to_file in test_messaging.py
        string sensorbinary = "../../../testdata/sensormessage.bin";
        fstream input(sensorbinary, ios::in | ios::binary);
        REQUIRE(input);

        WHEN("creating sensormessage from bytes generated by python") {
            MessageSerializer serializer;
            unique_ptr<Message> message = serializer.sensorMessageFromIStream(&input);
            REQUIRE(message->messageType() == SensorMessageType);            
            unique_ptr<SensorMessage> sensorMessage = toSensorMessage(move(message));

            THEN("it should have debugstring") {
                REQUIRE_THAT(sensorMessage->debugString(), Catch::Matchers::StartsWith("messageType: SensorMessageType"));
            //     REQUIRE_THAT(sensorMessage->debugString(), Equals("SensorMessageType"));
            }

            THEN("robot1 should have angles") {
                REQUIRE(sensorMessage->angles("robot1") == std::vector<double>{1.0});
            }

            AND_THEN("robot1 should have angleVelocities") {
                REQUIRE(sensorMessage->angleVelocities("robot1") == std::vector<double>{2.0});
            }

            AND_THEN("robot1 should have torques") {
                REQUIRE(sensorMessage->torques("robot1") == std::vector<double>{3.0});
            }

            THEN("box should have roll pitch yaw") {
                REQUIRE_THAT(sensorMessage->objectRPY("box"), Equals(vector<double>{4.0, 5.0, 6.0}));
            }

            THEN("box should have position") {
                REQUIRE(sensorMessage->objectPosition("box") == vector<double>{1.0, 2.0, 3.0});
            }

            THEN("it should roundtrip serialize to/from bytes") {
                MessageSerializer serializer;
                string bytes = serializer.serializeToString(*sensorMessage);
                unique_ptr<Message> message = serializer.fromBytes(bytes);
                REQUIRE_THAT(message->debugString(), Equals(sensorMessage->debugString()));
            }

        }
    }
}
