#include <fstream>
#include <catch2/catch_all.hpp>
#include <Messaging.pb.h>
#include "TestPaths.h"

using namespace std;
using namespace click::protobuf;
using Catch::Matchers::ContainsSubstring;
using google::protobuf::Map;

SCENARIO("Protobuf sensormessage serialization from file", "[click]" ) {

    GIVEN("A serialized sensormessage") {

        fstream input(TESTDATA_DIR + "sensormessage.bin", ios::in | ios::binary);
        REQUIRE(input);

        WHEN("creating sensormessage from bytes generated by python") {
            SensorMessage sensorMessage;
            REQUIRE(sensorMessage.ParseFromIstream(&input));

            THEN("it should contain robot1 sensor values") {

                REQUIRE(sensorMessage.objects().at("robot1").anglesensors().at(0) == 1.0);
                REQUIRE(sensorMessage.objects().at("robot1").anglevelocitysensors().at(0) == 2.0);
                REQUIRE(sensorMessage.objects().at("robot1").torquesensors().at(0) == 3.0);
                REQUIRE_THAT(sensorMessage.DebugString(), ContainsSubstring("messageType: SensorMessageType"));
            }

            THEN("it should contain box rpy") {

                Map<string, SensorMessage_Object> objects = sensorMessage.objects();
                using google::protobuf::RepeatedField;
                RepeatedField<double> vec = objects["box"].objectsensors()[1].rpy().arr();
                vector<double> actual(vec.begin(), vec.end());
                vector<double> expected = {4.0, 5.0, 6.0};
                REQUIRE(actual == expected);
            }
        }
    }
}
