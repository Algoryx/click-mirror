#include <fstream>
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_all.hpp>
#include <click/MessageSerializer.h>
#include <click/HandshakeMessage.h>
#include "testpaths.h"

using namespace std;
using namespace click;
// https://github.com/catchorg/Catch2/blob/devel/docs/matchers.md#top
using Catch::Matchers::Equals;
using Catch::Matchers::StartsWith;

SCENARIO("HandshakeMessage deserialization from file", "[clicklib]")
{

    GIVEN("A serialized HandshakeMessage")
    {

        // This file is created by test_write_handshake_message_to_file in test_messaging.py
        fstream input(TESTDATA_DIR + "handshakemessage.bin", ios::in | ios::binary);
        REQUIRE(input);

        WHEN("creating HandshakeMessage from bytes generated by python protobuf")
        {
            MessageSerializer serializer;
            unique_ptr<Message> message = serializer.handshakeMessageFromIStream(&input);
            REQUIRE(message->messageType() == HandshakeMessageType);
            unique_ptr<HandshakeMessage> handshakeMessage = toHandshakeMessage(move(message));

            THEN("it should contain a robot object")
            {
                vector<string> expected({"robot"});
                REQUIRE_THAT(handshakeMessage->objects(), Equals(expected));
            }

            THEN("it should contain controls in order")
            {
                vector<string> expected({"joint1", "joint2"});
                REQUIRE_THAT(handshakeMessage->controlsInOrder("robot"), Equals(expected));
            }

            THEN("it should contain jointSensors in order")
            {
                vector<string> expected({"joint1", "joint2"});
                REQUIRE_THAT(handshakeMessage->jointSensorsInOrder("robot"), Equals(expected));
            }

            THEN("it should contain controlsensors")
            {
                vector<ValueType> expected = {ValueType::Angle, ValueType::AngleVelocity, ValueType::Torque};
                REQUIRE_THAT(handshakeMessage->jointSensors("robot"), Equals(expected));
            }

            THEN("it should contain sensors")
            {
                vector<ValueType> expected = {ValueType::Force, ValueType::AngularAcceleration};
                REQUIRE_THAT(handshakeMessage->sensors("robot", "external_1"), Equals(expected));
            }

            THEN("it should contain objectsensors")
            {
                vector<ValueType> expected = {ValueType::Position};
                REQUIRE_THAT(handshakeMessage->objectSensors("robot"), Equals(expected));
            }

            THEN("it should contain 1 controlevent gripper")
            {
                vector<string> expected = {"gripper"};
                REQUIRE_THAT(handshakeMessage->controlEvents("robot"), Equals(expected));
            }

            THEN("it should contain controlevent value")
            {
                REQUIRE(handshakeMessage->controlEvent("robot", "gripper") == ValueType::Activated);
            }

            THEN("it should output debug string")
            {

                REQUIRE_THAT(handshakeMessage->debugString(), StartsWith("messageType: HandshakeMessageType"));
                //                REQUIRE_THAT(handshakeMessage->debugString(), Equals("HandshakeMessageType"));
            }

            THEN("it should roundtrip serialize to/from bytes")
            {
                MessageSerializer serializer;
                string bytes = serializer.serializeToString(*handshakeMessage);
                unique_ptr<Message> message = serializer.fromBytes(bytes);
                REQUIRE_THAT(message->debugString(), Equals(handshakeMessage->debugString()));
            }
        }
    }
}
