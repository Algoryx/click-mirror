// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messaging.proto

#include "Messaging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace click {
namespace protobuf {
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR HandshakeInitMessage::HandshakeInitMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeInitMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeInitMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeInitMessageDefaultTypeInternal() {}
  union {
    HandshakeInitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeInitMessageDefaultTypeInternal _HandshakeInitMessage_default_instance_;
PROTOBUF_CONSTEXPR SensorRequestMessage::SensorRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorRequestMessageDefaultTypeInternal() {}
  union {
    SensorRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorRequestMessageDefaultTypeInternal _SensorRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_Sensors::HandshakeMessage_Sensors(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_._types_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeMessage_SensorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_SensorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_SensorsDefaultTypeInternal() {}
  union {
    HandshakeMessage_Sensors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_SensorsDefaultTypeInternal _HandshakeMessage_Sensors_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_Object_ControlEventsEntry_DoNotUse::HandshakeMessage_Object_ControlEventsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HandshakeMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HandshakeMessage_Object_ControlEventsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal _HandshakeMessage_Object_ControlEventsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_Object_SensorsEntry_DoNotUse::HandshakeMessage_Object_SensorsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HandshakeMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HandshakeMessage_Object_SensorsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal _HandshakeMessage_Object_SensorsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_Object::HandshakeMessage_Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlsinorder_)*/{}
  , /*decltype(_impl_.jointsensors_)*/{}
  , /*decltype(_impl_._jointsensors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.controlevents_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sensors_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.objectsensors_)*/{}
  , /*decltype(_impl_._objectsensors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.jointsensorsinorder_)*/{}
  , /*decltype(_impl_.controltypesinorder_)*/{}
  , /*decltype(_impl_._controltypesinorder_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeMessage_ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_ObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_ObjectDefaultTypeInternal() {}
  union {
    HandshakeMessage_Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_ObjectDefaultTypeInternal _HandshakeMessage_Object_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_SimulationSettings::HandshakeMessage_SimulationSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestep_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeMessage_SimulationSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_SimulationSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_SimulationSettingsDefaultTypeInternal() {}
  union {
    HandshakeMessage_SimulationSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_SimulationSettingsDefaultTypeInternal _HandshakeMessage_SimulationSettings_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_ObjectsEntry_DoNotUse::HandshakeMessage_ObjectsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HandshakeMessage_ObjectsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_ObjectsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_ObjectsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HandshakeMessage_ObjectsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_ObjectsEntry_DoNotUseDefaultTypeInternal _HandshakeMessage_ObjectsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage::HandshakeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.simsettings_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.controltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessageDefaultTypeInternal() {}
  union {
    HandshakeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessageDefaultTypeInternal _HandshakeMessage_default_instance_;
PROTOBUF_CONSTEXPR ControlMessage_Object_ControlEventsEntry_DoNotUse::ControlMessage_Object_ControlEventsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ControlMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControlMessage_Object_ControlEventsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlMessage_Object_ControlEventsEntry_DoNotUseDefaultTypeInternal _ControlMessage_Object_ControlEventsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ControlMessage_Object::ControlMessage_Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.angles_)*/{}
  , /*decltype(_impl_.angularvelocities_)*/{}
  , /*decltype(_impl_.torques_)*/{}
  , /*decltype(_impl_.controlevents_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlMessage_ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlMessage_ObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlMessage_ObjectDefaultTypeInternal() {}
  union {
    ControlMessage_Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlMessage_ObjectDefaultTypeInternal _ControlMessage_Object_default_instance_;
PROTOBUF_CONSTEXPR ControlMessage_ObjectsEntry_DoNotUse::ControlMessage_ObjectsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ControlMessage_ObjectsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlMessage_ObjectsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlMessage_ObjectsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControlMessage_ObjectsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlMessage_ObjectsEntry_DoNotUseDefaultTypeInternal _ControlMessage_ObjectsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ControlMessage::ControlMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlMessageDefaultTypeInternal() {}
  union {
    ControlMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_Vec3::SensorMessage_Vec3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMessage_Vec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_Vec3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_Vec3DefaultTypeInternal() {}
  union {
    SensorMessage_Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_Vec3DefaultTypeInternal _SensorMessage_Vec3_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_Sensor::SensorMessage_Sensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SensorMessage_SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_SensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_SensorDefaultTypeInternal() {}
  union {
    SensorMessage_Sensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_SensorDefaultTypeInternal _SensorMessage_Sensor_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_Sensors::SensorMessage_Sensors(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensor_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMessage_SensorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_SensorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_SensorsDefaultTypeInternal() {}
  union {
    SensorMessage_Sensors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_SensorsDefaultTypeInternal _SensorMessage_Sensors_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_Object_SensorsEntry_DoNotUse::SensorMessage_Object_SensorsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SensorMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SensorMessage_Object_SensorsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_Object_SensorsEntry_DoNotUseDefaultTypeInternal _SensorMessage_Object_SensorsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_Object::SensorMessage_Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.anglesensors_)*/{}
  , /*decltype(_impl_.angularvelocitysensors_)*/{}
  , /*decltype(_impl_.torquesensors_)*/{}
  , /*decltype(_impl_.objectsensors_)*/{}
  , /*decltype(_impl_.forcesensors_)*/{}
  , /*decltype(_impl_.sensors_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMessage_ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_ObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_ObjectDefaultTypeInternal() {}
  union {
    SensorMessage_Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_ObjectDefaultTypeInternal _SensorMessage_Object_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_SimulationVariables::SensorMessage_SimulationVariables(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.simulatedtime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMessage_SimulationVariablesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_SimulationVariablesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_SimulationVariablesDefaultTypeInternal() {}
  union {
    SensorMessage_SimulationVariables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_SimulationVariablesDefaultTypeInternal _SensorMessage_SimulationVariables_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage_ObjectsEntry_DoNotUse::SensorMessage_ObjectsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SensorMessage_ObjectsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessage_ObjectsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessage_ObjectsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SensorMessage_ObjectsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessage_ObjectsEntry_DoNotUseDefaultTypeInternal _SensorMessage_ObjectsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SensorMessage::SensorMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.simvars_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMessageDefaultTypeInternal() {}
  union {
    SensorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMessageDefaultTypeInternal _SensorMessage_default_instance_;
PROTOBUF_CONSTEXPR ResetMessage::ResetMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResetMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetMessageDefaultTypeInternal() {}
  union {
    ResetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetMessageDefaultTypeInternal _ResetMessage_default_instance_;
PROTOBUF_CONSTEXPR ErrorMessage::ErrorMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorMessageDefaultTypeInternal() {}
  union {
    ErrorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorMessageDefaultTypeInternal _ErrorMessage_default_instance_;
}  // namespace protobuf
}  // namespace click
static ::_pb::Metadata file_level_metadata_Messaging_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Messaging_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Messaging_2eproto = nullptr;

const uint32_t TableStruct_Messaging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::Message, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::Message, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeInitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeInitMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeInitMessage, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorRequestMessage, _impl_.messagetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Sensors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Sensors, _impl_.types_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.controlsinorder_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.controltypesinorder_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.jointsensorsinorder_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.jointsensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.controlevents_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.sensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_Object, _impl_.objectsensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_SimulationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_SimulationSettings, _impl_.timestep_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage, _impl_.controltype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage, _impl_.objects_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::HandshakeMessage, _impl_.simsettings_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object, _impl_.angles_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object, _impl_.angularvelocities_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object, _impl_.torques_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_Object, _impl_.controlevents_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ControlMessage, _impl_.objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Vec3, _impl_.arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Sensor, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Sensor, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Sensors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Sensors, _impl_.sensor_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _impl_.anglesensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _impl_.angularvelocitysensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _impl_.torquesensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _impl_.forcesensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _impl_.objectsensors_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_Object, _impl_.sensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_SimulationVariables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_SimulationVariables, _impl_.simulatedtime_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage, _impl_.objects_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::SensorMessage, _impl_.simvars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ResetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ResetMessage, _impl_.messagetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ErrorMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ErrorMessage, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::click::protobuf::ErrorMessage, _impl_.errormessage_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::click::protobuf::Message)},
  { 8, -1, -1, sizeof(::click::protobuf::HandshakeInitMessage)},
  { 16, -1, -1, sizeof(::click::protobuf::SensorRequestMessage)},
  { 23, -1, -1, sizeof(::click::protobuf::HandshakeMessage_Sensors)},
  { 30, 38, -1, sizeof(::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse)},
  { 50, -1, -1, sizeof(::click::protobuf::HandshakeMessage_Object)},
  { 63, -1, -1, sizeof(::click::protobuf::HandshakeMessage_SimulationSettings)},
  { 70, 78, -1, sizeof(::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse)},
  { 80, -1, -1, sizeof(::click::protobuf::HandshakeMessage)},
  { 91, 99, -1, sizeof(::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse)},
  { 101, -1, -1, sizeof(::click::protobuf::ControlMessage_Object)},
  { 112, 120, -1, sizeof(::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse)},
  { 122, -1, -1, sizeof(::click::protobuf::ControlMessage)},
  { 130, -1, -1, sizeof(::click::protobuf::SensorMessage_Vec3)},
  { 137, -1, -1, sizeof(::click::protobuf::SensorMessage_Sensor)},
  { 157, -1, -1, sizeof(::click::protobuf::SensorMessage_Sensors)},
  { 164, 172, -1, sizeof(::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse)},
  { 174, -1, -1, sizeof(::click::protobuf::SensorMessage_Object)},
  { 186, -1, -1, sizeof(::click::protobuf::SensorMessage_SimulationVariables)},
  { 193, 201, -1, sizeof(::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse)},
  { 203, -1, -1, sizeof(::click::protobuf::SensorMessage)},
  { 212, -1, -1, sizeof(::click::protobuf::ResetMessage)},
  { 219, -1, -1, sizeof(::click::protobuf::ErrorMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::click::protobuf::_Message_default_instance_._instance,
  &::click::protobuf::_HandshakeInitMessage_default_instance_._instance,
  &::click::protobuf::_SensorRequestMessage_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_Sensors_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_Object_ControlEventsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_Object_SensorsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_Object_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_SimulationSettings_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_ObjectsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_HandshakeMessage_default_instance_._instance,
  &::click::protobuf::_ControlMessage_Object_ControlEventsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_ControlMessage_Object_default_instance_._instance,
  &::click::protobuf::_ControlMessage_ObjectsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_ControlMessage_default_instance_._instance,
  &::click::protobuf::_SensorMessage_Vec3_default_instance_._instance,
  &::click::protobuf::_SensorMessage_Sensor_default_instance_._instance,
  &::click::protobuf::_SensorMessage_Sensors_default_instance_._instance,
  &::click::protobuf::_SensorMessage_Object_SensorsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_SensorMessage_Object_default_instance_._instance,
  &::click::protobuf::_SensorMessage_SimulationVariables_default_instance_._instance,
  &::click::protobuf::_SensorMessage_ObjectsEntry_DoNotUse_default_instance_._instance,
  &::click::protobuf::_SensorMessage_default_instance_._instance,
  &::click::protobuf::_ResetMessage_default_instance_._instance,
  &::click::protobuf::_ErrorMessage_default_instance_._instance,
};

const char descriptor_table_protodef_Messaging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Messaging.proto\022\016click.protobuf\"G\n\007Mes"
  "sage\0220\n\013messageType\030\001 \001(\0162\033.click.protob"
  "uf.MessageType\022\n\n\002id\030\002 \001(\005\"r\n\024HandshakeI"
  "nitMessage\0220\n\013messageType\030\001 \001(\0162\033.click."
  "protobuf.MessageType\022(\n\007version\030\002 \001(\0162\027."
  "click.protobuf.Version\"H\n\024SensorRequestM"
  "essage\0220\n\013messageType\030\001 \001(\0162\033.click.prot"
  "obuf.MessageType\"\377\007\n\020HandshakeMessage\0220\n"
  "\013messageType\030\001 \001(\0162\033.click.protobuf.Mess"
  "ageType\022(\n\007version\030\002 \001(\0162\027.click.protobu"
  "f.Version\022.\n\013controlType\030\003 \001(\0162\031.click.p"
  "rotobuf.ValueType\022>\n\007objects\030\004 \003(\0132-.cli"
  "ck.protobuf.HandshakeMessage.ObjectsEntr"
  "y\022H\n\013simSettings\030\005 \001(\01323.click.protobuf."
  "HandshakeMessage.SimulationSettings\0323\n\007S"
  "ensors\022(\n\005types\030\001 \003(\0162\031.click.protobuf.V"
  "alueType\032\236\004\n\006Object\022\027\n\017controlsInOrder\030\001"
  " \003(\t\0226\n\023controlTypesInOrder\030\010 \003(\0162\031.clic"
  "k.protobuf.ValueType\022\033\n\023jointSensorsInOr"
  "der\030\007 \003(\t\022/\n\014jointSensors\030\002 \003(\0162\031.click."
  "protobuf.ValueType\022Q\n\rcontrolEvents\030\003 \003("
  "\0132:.click.protobuf.HandshakeMessage.Obje"
  "ct.ControlEventsEntry\022E\n\007sensors\030\004 \003(\01324"
  ".click.protobuf.HandshakeMessage.Object."
  "SensorsEntry\0220\n\robjectSensors\030\006 \003(\0162\031.cl"
  "ick.protobuf.ValueType\032O\n\022ControlEventsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001(\0162\031.click"
  ".protobuf.ValueType:\0028\001\032X\n\014SensorsEntry\022"
  "\013\n\003key\030\001 \001(\t\0227\n\005value\030\002 \001(\0132(.click.prot"
  "obuf.HandshakeMessage.Sensors:\0028\001\032&\n\022Sim"
  "ulationSettings\022\020\n\010timeStep\030\001 \001(\001\032W\n\014Obj"
  "ectsEntry\022\013\n\003key\030\001 \001(\t\0226\n\005value\030\002 \001(\0132\'."
  "click.protobuf.HandshakeMessage.Object:\002"
  "8\001\"\265\003\n\016ControlMessage\0220\n\013messageType\030\001 \001"
  "(\0162\033.click.protobuf.MessageType\022<\n\007objec"
  "ts\030\002 \003(\0132+.click.protobuf.ControlMessage"
  ".ObjectsEntry\032\333\001\n\006Object\022\016\n\006angles\030\001 \003(\001"
  "\022\031\n\021angularVelocities\030\002 \003(\001\022\017\n\007torques\030\003"
  " \003(\001\022\016\n\006values\030\005 \003(\001\022O\n\rcontrolEvents\030\004 "
  "\003(\01328.click.protobuf.ControlMessage.Obje"
  "ct.ControlEventsEntry\0324\n\022ControlEventsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\032U\n\014O"
  "bjectsEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001(\0132"
  "%.click.protobuf.ControlMessage.Object:\002"
  "8\001\"\334\n\n\rSensorMessage\0220\n\013messageType\030\001 \001("
  "\0162\033.click.protobuf.MessageType\022;\n\007object"
  "s\030\003 \003(\0132*.click.protobuf.SensorMessage.O"
  "bjectsEntry\022B\n\007simVars\030\004 \001(\01321.click.pro"
  "tobuf.SensorMessage.SimulationVariables\032"
  "\023\n\004Vec3\022\013\n\003arr\030\001 \003(\001\032\323\004\n\006Sensor\022\017\n\005angle"
  "\030\001 \001(\001H\000\022\033\n\021angularVelocity1d\030\002 \001(\001H\000\022\022\n"
  "\010torque1d\030\003 \001(\001H\000\0226\n\010position\030\004 \001(\0132\".cl"
  "ick.protobuf.SensorMessage.Vec3H\000\0221\n\003rpy"
  "\030\005 \001(\0132\".click.protobuf.SensorMessage.Ve"
  "c3H\000\022\023\n\tactivated\030\006 \001(\010H\000\022<\n\016acceleratio"
  "n3d\030\007 \001(\0132\".click.protobuf.SensorMessage"
  ".Vec3H\000\0225\n\007force3d\030\010 \001(\0132\".click.protobu"
  "f.SensorMessage.Vec3H\000\0226\n\010torque3d\030\t \001(\013"
  "2\".click.protobuf.SensorMessage.Vec3H\000\022C"
  "\n\025angularAcceleration3d\030\n \001(\0132\".click.pr"
  "otobuf.SensorMessage.Vec3H\000\0228\n\nvelocity3"
  "d\030\014 \001(\0132\".click.protobuf.SensorMessage.V"
  "ec3H\000\022\?\n\021angularVelocity3d\030\r \001(\0132\".click"
  ".protobuf.SensorMessage.Vec3H\000\022\021\n\007force1"
  "d\030\016 \001(\001H\000B\007\n\005value\032\?\n\007Sensors\0224\n\006sensor\030"
  "\001 \003(\0132$.click.protobuf.SensorMessage.Sen"
  "sor\032\347\002\n\006Object\022\024\n\014angleSensors\030\001 \003(\001\022\036\n\026"
  "angularVelocitySensors\030\002 \003(\001\022\025\n\rtorqueSe"
  "nsors\030\003 \003(\001\0228\n\014forceSensors\030\005 \003(\0132\".clic"
  "k.protobuf.SensorMessage.Vec3\022;\n\robjectS"
  "ensors\030\004 \003(\0132$.click.protobuf.SensorMess"
  "age.Sensor\022B\n\007sensors\030\006 \003(\01321.click.prot"
  "obuf.SensorMessage.Object.SensorsEntry\032U"
  "\n\014SensorsEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001"
  "(\0132%.click.protobuf.SensorMessage.Sensor"
  "s:\0028\001\032,\n\023SimulationVariables\022\025\n\rsimulate"
  "dTime\030\001 \001(\001\032T\n\014ObjectsEntry\022\013\n\003key\030\001 \001(\t"
  "\0223\n\005value\030\002 \001(\0132$.click.protobuf.SensorM"
  "essage.Object:\0028\001\"@\n\014ResetMessage\0220\n\013mes"
  "sageType\030\001 \001(\0162\033.click.protobuf.MessageT"
  "ype\"\200\001\n\014ErrorMessage\0220\n\013messageType\030\001 \001("
  "\0162\033.click.protobuf.MessageType\022(\n\005error\030"
  "\002 \001(\0162\031.click.protobuf.ErrorType\022\024\n\014erro"
  "rmessage\030\003 \001(\t*\276\001\n\013MessageType\022\034\n\030Handsh"
  "akeInitMessageType\020\000\022\030\n\024HandshakeMessage"
  "Type\020\001\022\034\n\030SensorRequestMessageType\020\006\022\026\n\022"
  "ControlMessageType\020\002\022\025\n\021SensorMessageTyp"
  "e\020\003\022\024\n\020ResetMessageType\020\004\022\024\n\020ErrorMessag"
  "eType\020\005*\355\001\n\tValueType\022\t\n\005Angle\020\000\022\025\n\021Angu"
  "larVelocity1D\020\001\022\014\n\010Torque1D\020\002\022\014\n\010Positio"
  "n\020\003\022\007\n\003RPY\020\004\022\r\n\tActivated\020\005\022\022\n\016Accelerat"
  "ion3D\020\006\022\013\n\007Force1D\020\014\022\013\n\007Force3D\020\007\022\014\n\010Tor"
  "que3D\020\010\022\031\n\025AngularAcceleration3D\020\t\022\016\n\nVe"
  "locity3D\020\n\022\025\n\021AngularVelocity3D\020\013\022\014\n\010Mul"
  "tiple\020\017*-\n\007Version\022\r\n\tUNDEFINED\020\000\022\023\n\017CUR"
  "RENT_VERSION\020\001*$\n\tErrorType\022\027\n\023VersionNo"
  "tSupported\020\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Messaging_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Messaging_2eproto = {
    false, false, 3860, descriptor_table_protodef_Messaging_2eproto,
    "Messaging.proto",
    &descriptor_table_Messaging_2eproto_once, nullptr, 0, 24,
    schemas, file_default_instances, TableStruct_Messaging_2eproto::offsets,
    file_level_metadata_Messaging_2eproto, file_level_enum_descriptors_Messaging_2eproto,
    file_level_service_descriptors_Messaging_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Messaging_2eproto_getter() {
  return &descriptor_table_Messaging_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Messaging_2eproto(&descriptor_table_Messaging_2eproto);
namespace click {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Messaging_2eproto);
  return file_level_enum_descriptors_Messaging_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Messaging_2eproto);
  return file_level_enum_descriptors_Messaging_2eproto[1];
}
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Messaging_2eproto);
  return file_level_enum_descriptors_Messaging_2eproto[2];
}
bool Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Messaging_2eproto);
  return file_level_enum_descriptors_Messaging_2eproto[3];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.messagetype_, &from._impl_.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:click.protobuf.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:click.protobuf.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.id_)
      + sizeof(Message::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.messagetype_)>(
          reinterpret_cast<char*>(&_impl_.messagetype_),
          reinterpret_cast<char*>(&other->_impl_.messagetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[0]);
}

// ===================================================================

class HandshakeInitMessage::_Internal {
 public:
};

HandshakeInitMessage::HandshakeInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.HandshakeInitMessage)
}
HandshakeInitMessage::HandshakeInitMessage(const HandshakeInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeInitMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.messagetype_, &from._impl_.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:click.protobuf.HandshakeInitMessage)
}

inline void HandshakeInitMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){0}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandshakeInitMessage::~HandshakeInitMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.HandshakeInitMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeInitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandshakeInitMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.HandshakeInitMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeInitMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.Version version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::click::protobuf::Version>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeInitMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.HandshakeInitMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // .click.protobuf.Version version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.HandshakeInitMessage)
  return target;
}

size_t HandshakeInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.HandshakeInitMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // .click.protobuf.Version version = 2;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeInitMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeInitMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeInitMessage::GetClassData() const { return &_class_data_; }


void HandshakeInitMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeInitMessage*>(&to_msg);
  auto& from = static_cast<const HandshakeInitMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.HandshakeInitMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeInitMessage::CopyFrom(const HandshakeInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.HandshakeInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeInitMessage::IsInitialized() const {
  return true;
}

void HandshakeInitMessage::InternalSwap(HandshakeInitMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandshakeInitMessage, _impl_.version_)
      + sizeof(HandshakeInitMessage::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(HandshakeInitMessage, _impl_.messagetype_)>(
          reinterpret_cast<char*>(&_impl_.messagetype_),
          reinterpret_cast<char*>(&other->_impl_.messagetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeInitMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[1]);
}

// ===================================================================

class SensorRequestMessage::_Internal {
 public:
};

SensorRequestMessage::SensorRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorRequestMessage)
}
SensorRequestMessage::SensorRequestMessage(const SensorRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorRequestMessage)
}

inline void SensorRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorRequestMessage::~SensorRequestMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorRequestMessage)
  return target;
}

size_t SensorRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRequestMessage::GetClassData() const { return &_class_data_; }


void SensorRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorRequestMessage*>(&to_msg);
  auto& from = static_cast<const SensorRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRequestMessage::CopyFrom(const SensorRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRequestMessage::IsInitialized() const {
  return true;
}

void SensorRequestMessage::InternalSwap(SensorRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[2]);
}

// ===================================================================

class HandshakeMessage_Sensors::_Internal {
 public:
};

HandshakeMessage_Sensors::HandshakeMessage_Sensors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.HandshakeMessage.Sensors)
}
HandshakeMessage_Sensors::HandshakeMessage_Sensors(const HandshakeMessage_Sensors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage_Sensors* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){from._impl_.types_}
    , /*decltype(_impl_._types_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:click.protobuf.HandshakeMessage.Sensors)
}

inline void HandshakeMessage_Sensors::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){arena}
    , /*decltype(_impl_._types_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandshakeMessage_Sensors::~HandshakeMessage_Sensors() {
  // @@protoc_insertion_point(destructor:click.protobuf.HandshakeMessage.Sensors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage_Sensors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.types_.~RepeatedField();
}

void HandshakeMessage_Sensors::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage_Sensors::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.HandshakeMessage.Sensors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage_Sensors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .click.protobuf.ValueType types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::click::protobuf::ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage_Sensors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.HandshakeMessage.Sensors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .click.protobuf.ValueType types = 1;
  {
    int byte_size = _impl_._types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.HandshakeMessage.Sensors)
  return target;
}

size_t HandshakeMessage_Sensors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.HandshakeMessage.Sensors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .click.protobuf.ValueType types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage_Sensors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage_Sensors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage_Sensors::GetClassData() const { return &_class_data_; }


void HandshakeMessage_Sensors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage_Sensors*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage_Sensors&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.HandshakeMessage.Sensors)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage_Sensors::CopyFrom(const HandshakeMessage_Sensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.HandshakeMessage.Sensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage_Sensors::IsInitialized() const {
  return true;
}

void HandshakeMessage_Sensors::InternalSwap(HandshakeMessage_Sensors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_Sensors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[3]);
}

// ===================================================================

HandshakeMessage_Object_ControlEventsEntry_DoNotUse::HandshakeMessage_Object_ControlEventsEntry_DoNotUse() {}
HandshakeMessage_Object_ControlEventsEntry_DoNotUse::HandshakeMessage_Object_ControlEventsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HandshakeMessage_Object_ControlEventsEntry_DoNotUse::MergeFrom(const HandshakeMessage_Object_ControlEventsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_Object_ControlEventsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[4]);
}

// ===================================================================

HandshakeMessage_Object_SensorsEntry_DoNotUse::HandshakeMessage_Object_SensorsEntry_DoNotUse() {}
HandshakeMessage_Object_SensorsEntry_DoNotUse::HandshakeMessage_Object_SensorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HandshakeMessage_Object_SensorsEntry_DoNotUse::MergeFrom(const HandshakeMessage_Object_SensorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_Object_SensorsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[5]);
}

// ===================================================================

class HandshakeMessage_Object::_Internal {
 public:
};

HandshakeMessage_Object::HandshakeMessage_Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HandshakeMessage_Object::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:click.protobuf.HandshakeMessage.Object)
}
HandshakeMessage_Object::HandshakeMessage_Object(const HandshakeMessage_Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage_Object* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlsinorder_){from._impl_.controlsinorder_}
    , decltype(_impl_.jointsensors_){from._impl_.jointsensors_}
    , /*decltype(_impl_._jointsensors_cached_byte_size_)*/{0}
    , /*decltype(_impl_.controlevents_)*/{}
    , /*decltype(_impl_.sensors_)*/{}
    , decltype(_impl_.objectsensors_){from._impl_.objectsensors_}
    , /*decltype(_impl_._objectsensors_cached_byte_size_)*/{0}
    , decltype(_impl_.jointsensorsinorder_){from._impl_.jointsensorsinorder_}
    , decltype(_impl_.controltypesinorder_){from._impl_.controltypesinorder_}
    , /*decltype(_impl_._controltypesinorder_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.controlevents_.MergeFrom(from._impl_.controlevents_);
  _this->_impl_.sensors_.MergeFrom(from._impl_.sensors_);
  // @@protoc_insertion_point(copy_constructor:click.protobuf.HandshakeMessage.Object)
}

inline void HandshakeMessage_Object::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.controlsinorder_){arena}
    , decltype(_impl_.jointsensors_){arena}
    , /*decltype(_impl_._jointsensors_cached_byte_size_)*/{0}
    , /*decltype(_impl_.controlevents_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.sensors_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.objectsensors_){arena}
    , /*decltype(_impl_._objectsensors_cached_byte_size_)*/{0}
    , decltype(_impl_.jointsensorsinorder_){arena}
    , decltype(_impl_.controltypesinorder_){arena}
    , /*decltype(_impl_._controltypesinorder_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandshakeMessage_Object::~HandshakeMessage_Object() {
  // @@protoc_insertion_point(destructor:click.protobuf.HandshakeMessage.Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage_Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.controlsinorder_.~RepeatedPtrField();
  _impl_.jointsensors_.~RepeatedField();
  _impl_.controlevents_.Destruct();
  _impl_.controlevents_.~MapField();
  _impl_.sensors_.Destruct();
  _impl_.sensors_.~MapField();
  _impl_.objectsensors_.~RepeatedField();
  _impl_.jointsensorsinorder_.~RepeatedPtrField();
  _impl_.controltypesinorder_.~RepeatedField();
}

void HandshakeMessage_Object::ArenaDtor(void* object) {
  HandshakeMessage_Object* _this = reinterpret_cast< HandshakeMessage_Object* >(object);
  _this->_impl_.controlevents_.Destruct();
  _this->_impl_.sensors_.Destruct();
}
void HandshakeMessage_Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage_Object::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.HandshakeMessage.Object)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.controlsinorder_.Clear();
  _impl_.jointsensors_.Clear();
  _impl_.controlevents_.Clear();
  _impl_.sensors_.Clear();
  _impl_.objectsensors_.Clear();
  _impl_.jointsensorsinorder_.Clear();
  _impl_.controltypesinorder_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage_Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string controlsInOrder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_controlsinorder();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "click.protobuf.HandshakeMessage.Object.controlsInOrder"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .click.protobuf.ValueType jointSensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_jointsensors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_jointsensors(static_cast<::click::protobuf::ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .click.protobuf.ValueType> controlEvents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.controlevents_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .click.protobuf.HandshakeMessage.Sensors> sensors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sensors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .click.protobuf.ValueType objectSensors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_objectsensors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_objectsensors(static_cast<::click::protobuf::ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string jointSensorsInOrder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_jointsensorsinorder();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "click.protobuf.HandshakeMessage.Object.jointSensorsInOrder"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .click.protobuf.ValueType controlTypesInOrder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_controltypesinorder(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_controltypesinorder(static_cast<::click::protobuf::ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage_Object::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.HandshakeMessage.Object)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string controlsInOrder = 1;
  for (int i = 0, n = this->_internal_controlsinorder_size(); i < n; i++) {
    const auto& s = this->_internal_controlsinorder(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "click.protobuf.HandshakeMessage.Object.controlsInOrder");
    target = stream->WriteString(1, s, target);
  }

  // repeated .click.protobuf.ValueType jointSensors = 2;
  {
    int byte_size = _impl_._jointsensors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.jointsensors_, byte_size, target);
    }
  }

  // map<string, .click.protobuf.ValueType> controlEvents = 3;
  if (!this->_internal_controlevents().empty()) {
    using MapType = ::_pb::Map<std::string, ::click::protobuf::ValueType>;
    using WireHelper = HandshakeMessage_Object_ControlEventsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_controlevents();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.HandshakeMessage.Object.ControlEventsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .click.protobuf.HandshakeMessage.Sensors> sensors = 4;
  if (!this->_internal_sensors().empty()) {
    using MapType = ::_pb::Map<std::string, ::click::protobuf::HandshakeMessage_Sensors>;
    using WireHelper = HandshakeMessage_Object_SensorsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sensors();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.HandshakeMessage.Object.SensorsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .click.protobuf.ValueType objectSensors = 6;
  {
    int byte_size = _impl_._objectsensors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, _impl_.objectsensors_, byte_size, target);
    }
  }

  // repeated string jointSensorsInOrder = 7;
  for (int i = 0, n = this->_internal_jointsensorsinorder_size(); i < n; i++) {
    const auto& s = this->_internal_jointsensorsinorder(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "click.protobuf.HandshakeMessage.Object.jointSensorsInOrder");
    target = stream->WriteString(7, s, target);
  }

  // repeated .click.protobuf.ValueType controlTypesInOrder = 8;
  {
    int byte_size = _impl_._controltypesinorder_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, _impl_.controltypesinorder_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.HandshakeMessage.Object)
  return target;
}

size_t HandshakeMessage_Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.HandshakeMessage.Object)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string controlsInOrder = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.controlsinorder_.size());
  for (int i = 0, n = _impl_.controlsinorder_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.controlsinorder_.Get(i));
  }

  // repeated .click.protobuf.ValueType jointSensors = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_jointsensors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_jointsensors(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._jointsensors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .click.protobuf.ValueType> controlEvents = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_controlevents_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::click::protobuf::ValueType >::const_iterator
      it = this->_internal_controlevents().begin();
      it != this->_internal_controlevents().end(); ++it) {
    total_size += HandshakeMessage_Object_ControlEventsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .click.protobuf.HandshakeMessage.Sensors> sensors = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sensors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::click::protobuf::HandshakeMessage_Sensors >::const_iterator
      it = this->_internal_sensors().begin();
      it != this->_internal_sensors().end(); ++it) {
    total_size += HandshakeMessage_Object_SensorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .click.protobuf.ValueType objectSensors = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_objectsensors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_objectsensors(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._objectsensors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string jointSensorsInOrder = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.jointsensorsinorder_.size());
  for (int i = 0, n = _impl_.jointsensorsinorder_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.jointsensorsinorder_.Get(i));
  }

  // repeated .click.protobuf.ValueType controlTypesInOrder = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_controltypesinorder_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_controltypesinorder(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._controltypesinorder_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage_Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage_Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage_Object::GetClassData() const { return &_class_data_; }


void HandshakeMessage_Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage_Object*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage_Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.HandshakeMessage.Object)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.controlsinorder_.MergeFrom(from._impl_.controlsinorder_);
  _this->_impl_.jointsensors_.MergeFrom(from._impl_.jointsensors_);
  _this->_impl_.controlevents_.MergeFrom(from._impl_.controlevents_);
  _this->_impl_.sensors_.MergeFrom(from._impl_.sensors_);
  _this->_impl_.objectsensors_.MergeFrom(from._impl_.objectsensors_);
  _this->_impl_.jointsensorsinorder_.MergeFrom(from._impl_.jointsensorsinorder_);
  _this->_impl_.controltypesinorder_.MergeFrom(from._impl_.controltypesinorder_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage_Object::CopyFrom(const HandshakeMessage_Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.HandshakeMessage.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage_Object::IsInitialized() const {
  return true;
}

void HandshakeMessage_Object::InternalSwap(HandshakeMessage_Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.controlsinorder_.InternalSwap(&other->_impl_.controlsinorder_);
  _impl_.jointsensors_.InternalSwap(&other->_impl_.jointsensors_);
  _impl_.controlevents_.InternalSwap(&other->_impl_.controlevents_);
  _impl_.sensors_.InternalSwap(&other->_impl_.sensors_);
  _impl_.objectsensors_.InternalSwap(&other->_impl_.objectsensors_);
  _impl_.jointsensorsinorder_.InternalSwap(&other->_impl_.jointsensorsinorder_);
  _impl_.controltypesinorder_.InternalSwap(&other->_impl_.controltypesinorder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[6]);
}

// ===================================================================

class HandshakeMessage_SimulationSettings::_Internal {
 public:
};

HandshakeMessage_SimulationSettings::HandshakeMessage_SimulationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.HandshakeMessage.SimulationSettings)
}
HandshakeMessage_SimulationSettings::HandshakeMessage_SimulationSettings(const HandshakeMessage_SimulationSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage_SimulationSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestep_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestep_ = from._impl_.timestep_;
  // @@protoc_insertion_point(copy_constructor:click.protobuf.HandshakeMessage.SimulationSettings)
}

inline void HandshakeMessage_SimulationSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestep_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandshakeMessage_SimulationSettings::~HandshakeMessage_SimulationSettings() {
  // @@protoc_insertion_point(destructor:click.protobuf.HandshakeMessage.SimulationSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage_SimulationSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandshakeMessage_SimulationSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage_SimulationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.HandshakeMessage.SimulationSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestep_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage_SimulationSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timeStep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.timestep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage_SimulationSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.HandshakeMessage.SimulationSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timeStep = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = this->_internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.HandshakeMessage.SimulationSettings)
  return target;
}

size_t HandshakeMessage_SimulationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.HandshakeMessage.SimulationSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double timeStep = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = this->_internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage_SimulationSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage_SimulationSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage_SimulationSettings::GetClassData() const { return &_class_data_; }


void HandshakeMessage_SimulationSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage_SimulationSettings*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage_SimulationSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.HandshakeMessage.SimulationSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = from._internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    _this->_internal_set_timestep(from._internal_timestep());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage_SimulationSettings::CopyFrom(const HandshakeMessage_SimulationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.HandshakeMessage.SimulationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage_SimulationSettings::IsInitialized() const {
  return true;
}

void HandshakeMessage_SimulationSettings::InternalSwap(HandshakeMessage_SimulationSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestep_, other->_impl_.timestep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_SimulationSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[7]);
}

// ===================================================================

HandshakeMessage_ObjectsEntry_DoNotUse::HandshakeMessage_ObjectsEntry_DoNotUse() {}
HandshakeMessage_ObjectsEntry_DoNotUse::HandshakeMessage_ObjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HandshakeMessage_ObjectsEntry_DoNotUse::MergeFrom(const HandshakeMessage_ObjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_ObjectsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[8]);
}

// ===================================================================

class HandshakeMessage::_Internal {
 public:
  static const ::click::protobuf::HandshakeMessage_SimulationSettings& simsettings(const HandshakeMessage* msg);
};

const ::click::protobuf::HandshakeMessage_SimulationSettings&
HandshakeMessage::_Internal::simsettings(const HandshakeMessage* msg) {
  return *msg->_impl_.simsettings_;
}
HandshakeMessage::HandshakeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HandshakeMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:click.protobuf.HandshakeMessage)
}
HandshakeMessage::HandshakeMessage(const HandshakeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.objects_)*/{}
    , decltype(_impl_.simsettings_){nullptr}
    , decltype(_impl_.messagetype_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.controltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  if (from._internal_has_simsettings()) {
    _this->_impl_.simsettings_ = new ::click::protobuf::HandshakeMessage_SimulationSettings(*from._impl_.simsettings_);
  }
  ::memcpy(&_impl_.messagetype_, &from._impl_.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.controltype_) -
    reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.controltype_));
  // @@protoc_insertion_point(copy_constructor:click.protobuf.HandshakeMessage)
}

inline void HandshakeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.objects_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.simsettings_){nullptr}
    , decltype(_impl_.messagetype_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.controltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandshakeMessage::~HandshakeMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.HandshakeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.Destruct();
  _impl_.objects_.~MapField();
  if (this != internal_default_instance()) delete _impl_.simsettings_;
}

void HandshakeMessage::ArenaDtor(void* object) {
  HandshakeMessage* _this = reinterpret_cast< HandshakeMessage* >(object);
  _this->_impl_.objects_.Destruct();
}
void HandshakeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.HandshakeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.simsettings_ != nullptr) {
    delete _impl_.simsettings_;
  }
  _impl_.simsettings_ = nullptr;
  ::memset(&_impl_.messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.controltype_) -
      reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.controltype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.Version version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::click::protobuf::Version>(val));
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.ValueType controlType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_controltype(static_cast<::click::protobuf::ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .click.protobuf.HandshakeMessage.Object> objects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.objects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.HandshakeMessage.SimulationSettings simSettings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_simsettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.HandshakeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // .click.protobuf.Version version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_version(), target);
  }

  // .click.protobuf.ValueType controlType = 3;
  if (this->_internal_controltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_controltype(), target);
  }

  // map<string, .click.protobuf.HandshakeMessage.Object> objects = 4;
  if (!this->_internal_objects().empty()) {
    using MapType = ::_pb::Map<std::string, ::click::protobuf::HandshakeMessage_Object>;
    using WireHelper = HandshakeMessage_ObjectsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_objects();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.HandshakeMessage.ObjectsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .click.protobuf.HandshakeMessage.SimulationSettings simSettings = 5;
  if (this->_internal_has_simsettings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::simsettings(this),
        _Internal::simsettings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.HandshakeMessage)
  return target;
}

size_t HandshakeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.HandshakeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .click.protobuf.HandshakeMessage.Object> objects = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_objects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::click::protobuf::HandshakeMessage_Object >::const_iterator
      it = this->_internal_objects().begin();
      it != this->_internal_objects().end(); ++it) {
    total_size += HandshakeMessage_ObjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .click.protobuf.HandshakeMessage.SimulationSettings simSettings = 5;
  if (this->_internal_has_simsettings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.simsettings_);
  }

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // .click.protobuf.Version version = 2;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  // .click.protobuf.ValueType controlType = 3;
  if (this->_internal_controltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_controltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage::GetClassData() const { return &_class_data_; }


void HandshakeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.HandshakeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  if (from._internal_has_simsettings()) {
    _this->_internal_mutable_simsettings()->::click::protobuf::HandshakeMessage_SimulationSettings::MergeFrom(
        from._internal_simsettings());
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_controltype() != 0) {
    _this->_internal_set_controltype(from._internal_controltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage::CopyFrom(const HandshakeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.HandshakeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage::IsInitialized() const {
  return true;
}

void HandshakeMessage::InternalSwap(HandshakeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandshakeMessage, _impl_.controltype_)
      + sizeof(HandshakeMessage::_impl_.controltype_)
      - PROTOBUF_FIELD_OFFSET(HandshakeMessage, _impl_.simsettings_)>(
          reinterpret_cast<char*>(&_impl_.simsettings_),
          reinterpret_cast<char*>(&other->_impl_.simsettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[9]);
}

// ===================================================================

ControlMessage_Object_ControlEventsEntry_DoNotUse::ControlMessage_Object_ControlEventsEntry_DoNotUse() {}
ControlMessage_Object_ControlEventsEntry_DoNotUse::ControlMessage_Object_ControlEventsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControlMessage_Object_ControlEventsEntry_DoNotUse::MergeFrom(const ControlMessage_Object_ControlEventsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage_Object_ControlEventsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[10]);
}

// ===================================================================

class ControlMessage_Object::_Internal {
 public:
};

ControlMessage_Object::ControlMessage_Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ControlMessage_Object::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:click.protobuf.ControlMessage.Object)
}
ControlMessage_Object::ControlMessage_Object(const ControlMessage_Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlMessage_Object* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.angles_){from._impl_.angles_}
    , decltype(_impl_.angularvelocities_){from._impl_.angularvelocities_}
    , decltype(_impl_.torques_){from._impl_.torques_}
    , /*decltype(_impl_.controlevents_)*/{}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.controlevents_.MergeFrom(from._impl_.controlevents_);
  // @@protoc_insertion_point(copy_constructor:click.protobuf.ControlMessage.Object)
}

inline void ControlMessage_Object::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.angles_){arena}
    , decltype(_impl_.angularvelocities_){arena}
    , decltype(_impl_.torques_){arena}
    , /*decltype(_impl_.controlevents_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlMessage_Object::~ControlMessage_Object() {
  // @@protoc_insertion_point(destructor:click.protobuf.ControlMessage.Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ControlMessage_Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.angles_.~RepeatedField();
  _impl_.angularvelocities_.~RepeatedField();
  _impl_.torques_.~RepeatedField();
  _impl_.controlevents_.Destruct();
  _impl_.controlevents_.~MapField();
  _impl_.values_.~RepeatedField();
}

void ControlMessage_Object::ArenaDtor(void* object) {
  ControlMessage_Object* _this = reinterpret_cast< ControlMessage_Object* >(object);
  _this->_impl_.controlevents_.Destruct();
}
void ControlMessage_Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlMessage_Object::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.ControlMessage.Object)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angles_.Clear();
  _impl_.angularvelocities_.Clear();
  _impl_.torques_.Clear();
  _impl_.controlevents_.Clear();
  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessage_Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double angles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_angles(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double angularVelocities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angularvelocities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_angularvelocities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double torques = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_torques(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_torques(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> controlEvents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.controlevents_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMessage_Object::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.ControlMessage.Object)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double angles = 1;
  if (this->_internal_angles_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_angles(), target);
  }

  // repeated double angularVelocities = 2;
  if (this->_internal_angularvelocities_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_angularvelocities(), target);
  }

  // repeated double torques = 3;
  if (this->_internal_torques_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_torques(), target);
  }

  // map<string, bool> controlEvents = 4;
  if (!this->_internal_controlevents().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = ControlMessage_Object_ControlEventsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_controlevents();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.ControlMessage.Object.ControlEventsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated double values = 5;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.ControlMessage.Object)
  return target;
}

size_t ControlMessage_Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.ControlMessage.Object)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double angles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angles_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double angularVelocities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angularvelocities_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double torques = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_torques_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // map<string, bool> controlEvents = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_controlevents_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_controlevents().begin();
      it != this->_internal_controlevents().end(); ++it) {
    total_size += ControlMessage_Object_ControlEventsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated double values = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMessage_Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlMessage_Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMessage_Object::GetClassData() const { return &_class_data_; }


void ControlMessage_Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlMessage_Object*>(&to_msg);
  auto& from = static_cast<const ControlMessage_Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.ControlMessage.Object)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.angles_.MergeFrom(from._impl_.angles_);
  _this->_impl_.angularvelocities_.MergeFrom(from._impl_.angularvelocities_);
  _this->_impl_.torques_.MergeFrom(from._impl_.torques_);
  _this->_impl_.controlevents_.MergeFrom(from._impl_.controlevents_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMessage_Object::CopyFrom(const ControlMessage_Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.ControlMessage.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage_Object::IsInitialized() const {
  return true;
}

void ControlMessage_Object::InternalSwap(ControlMessage_Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.angles_.InternalSwap(&other->_impl_.angles_);
  _impl_.angularvelocities_.InternalSwap(&other->_impl_.angularvelocities_);
  _impl_.torques_.InternalSwap(&other->_impl_.torques_);
  _impl_.controlevents_.InternalSwap(&other->_impl_.controlevents_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage_Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[11]);
}

// ===================================================================

ControlMessage_ObjectsEntry_DoNotUse::ControlMessage_ObjectsEntry_DoNotUse() {}
ControlMessage_ObjectsEntry_DoNotUse::ControlMessage_ObjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControlMessage_ObjectsEntry_DoNotUse::MergeFrom(const ControlMessage_ObjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage_ObjectsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[12]);
}

// ===================================================================

class ControlMessage::_Internal {
 public:
};

ControlMessage::ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ControlMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:click.protobuf.ControlMessage)
}
ControlMessage::ControlMessage(const ControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.objects_)*/{}
    , decltype(_impl_.messagetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:click.protobuf.ControlMessage)
}

inline void ControlMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.objects_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.messagetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.ControlMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ControlMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.Destruct();
  _impl_.objects_.~MapField();
}

void ControlMessage::ArenaDtor(void* object) {
  ControlMessage* _this = reinterpret_cast< ControlMessage* >(object);
  _this->_impl_.objects_.Destruct();
}
void ControlMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.ControlMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _impl_.messagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .click.protobuf.ControlMessage.Object> objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.objects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.ControlMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // map<string, .click.protobuf.ControlMessage.Object> objects = 2;
  if (!this->_internal_objects().empty()) {
    using MapType = ::_pb::Map<std::string, ::click::protobuf::ControlMessage_Object>;
    using WireHelper = ControlMessage_ObjectsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_objects();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.ControlMessage.ObjectsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.ControlMessage)
  return target;
}

size_t ControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.ControlMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .click.protobuf.ControlMessage.Object> objects = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_objects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::click::protobuf::ControlMessage_Object >::const_iterator
      it = this->_internal_objects().begin();
      it != this->_internal_objects().end(); ++it) {
    total_size += ControlMessage_ObjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMessage::GetClassData() const { return &_class_data_; }


void ControlMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlMessage*>(&to_msg);
  auto& from = static_cast<const ControlMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.ControlMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  return true;
}

void ControlMessage::InternalSwap(ControlMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[13]);
}

// ===================================================================

class SensorMessage_Vec3::_Internal {
 public:
};

SensorMessage_Vec3::SensorMessage_Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorMessage.Vec3)
}
SensorMessage_Vec3::SensorMessage_Vec3(const SensorMessage_Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMessage_Vec3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){from._impl_.arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorMessage.Vec3)
}

inline void SensorMessage_Vec3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMessage_Vec3::~SensorMessage_Vec3() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorMessage.Vec3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMessage_Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arr_.~RepeatedField();
}

void SensorMessage_Vec3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMessage_Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorMessage.Vec3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage_Vec3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_arr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage_Vec3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorMessage.Vec3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double arr = 1;
  if (this->_internal_arr_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_arr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorMessage.Vec3)
  return target;
}

size_t SensorMessage_Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorMessage.Vec3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double arr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage_Vec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMessage_Vec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage_Vec3::GetClassData() const { return &_class_data_; }


void SensorMessage_Vec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMessage_Vec3*>(&to_msg);
  auto& from = static_cast<const SensorMessage_Vec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorMessage.Vec3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arr_.MergeFrom(from._impl_.arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage_Vec3::CopyFrom(const SensorMessage_Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorMessage.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage_Vec3::IsInitialized() const {
  return true;
}

void SensorMessage_Vec3::InternalSwap(SensorMessage_Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arr_.InternalSwap(&other->_impl_.arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_Vec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[14]);
}

// ===================================================================

class SensorMessage_Sensor::_Internal {
 public:
  static const ::click::protobuf::SensorMessage_Vec3& position(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& rpy(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& acceleration3d(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& force3d(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& torque3d(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& angularacceleration3d(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& velocity3d(const SensorMessage_Sensor* msg);
  static const ::click::protobuf::SensorMessage_Vec3& angularvelocity3d(const SensorMessage_Sensor* msg);
};

const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::position(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.position_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::rpy(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.rpy_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::acceleration3d(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.acceleration3d_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::force3d(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.force3d_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::torque3d(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.torque3d_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::angularacceleration3d(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.angularacceleration3d_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::velocity3d(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.velocity3d_;
}
const ::click::protobuf::SensorMessage_Vec3&
SensorMessage_Sensor::_Internal::angularvelocity3d(const SensorMessage_Sensor* msg) {
  return *msg->_impl_.value_.angularvelocity3d_;
}
void SensorMessage_Sensor::set_allocated_position(::click::protobuf::SensorMessage_Vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    _impl_.value_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.position)
}
void SensorMessage_Sensor::set_allocated_rpy(::click::protobuf::SensorMessage_Vec3* rpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (rpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rpy);
    if (message_arena != submessage_arena) {
      rpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpy, submessage_arena);
    }
    set_has_rpy();
    _impl_.value_.rpy_ = rpy;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.rpy)
}
void SensorMessage_Sensor::set_allocated_acceleration3d(::click::protobuf::SensorMessage_Vec3* acceleration3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (acceleration3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration3d);
    if (message_arena != submessage_arena) {
      acceleration3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration3d, submessage_arena);
    }
    set_has_acceleration3d();
    _impl_.value_.acceleration3d_ = acceleration3d;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.acceleration3d)
}
void SensorMessage_Sensor::set_allocated_force3d(::click::protobuf::SensorMessage_Vec3* force3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (force3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(force3d);
    if (message_arena != submessage_arena) {
      force3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force3d, submessage_arena);
    }
    set_has_force3d();
    _impl_.value_.force3d_ = force3d;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.force3d)
}
void SensorMessage_Sensor::set_allocated_torque3d(::click::protobuf::SensorMessage_Vec3* torque3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (torque3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(torque3d);
    if (message_arena != submessage_arena) {
      torque3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torque3d, submessage_arena);
    }
    set_has_torque3d();
    _impl_.value_.torque3d_ = torque3d;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.torque3d)
}
void SensorMessage_Sensor::set_allocated_angularacceleration3d(::click::protobuf::SensorMessage_Vec3* angularacceleration3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (angularacceleration3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angularacceleration3d);
    if (message_arena != submessage_arena) {
      angularacceleration3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularacceleration3d, submessage_arena);
    }
    set_has_angularacceleration3d();
    _impl_.value_.angularacceleration3d_ = angularacceleration3d;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.angularAcceleration3d)
}
void SensorMessage_Sensor::set_allocated_velocity3d(::click::protobuf::SensorMessage_Vec3* velocity3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (velocity3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity3d);
    if (message_arena != submessage_arena) {
      velocity3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity3d, submessage_arena);
    }
    set_has_velocity3d();
    _impl_.value_.velocity3d_ = velocity3d;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.velocity3d)
}
void SensorMessage_Sensor::set_allocated_angularvelocity3d(::click::protobuf::SensorMessage_Vec3* angularvelocity3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (angularvelocity3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angularvelocity3d);
    if (message_arena != submessage_arena) {
      angularvelocity3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelocity3d, submessage_arena);
    }
    set_has_angularvelocity3d();
    _impl_.value_.angularvelocity3d_ = angularvelocity3d;
  }
  // @@protoc_insertion_point(field_set_allocated:click.protobuf.SensorMessage.Sensor.angularVelocity3d)
}
SensorMessage_Sensor::SensorMessage_Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorMessage.Sensor)
}
SensorMessage_Sensor::SensorMessage_Sensor(const SensorMessage_Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMessage_Sensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kAngle: {
      _this->_internal_set_angle(from._internal_angle());
      break;
    }
    case kAngularVelocity1D: {
      _this->_internal_set_angularvelocity1d(from._internal_angularvelocity1d());
      break;
    }
    case kTorque1D: {
      _this->_internal_set_torque1d(from._internal_torque1d());
      break;
    }
    case kPosition: {
      _this->_internal_mutable_position()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_position());
      break;
    }
    case kRpy: {
      _this->_internal_mutable_rpy()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_rpy());
      break;
    }
    case kActivated: {
      _this->_internal_set_activated(from._internal_activated());
      break;
    }
    case kAcceleration3D: {
      _this->_internal_mutable_acceleration3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_acceleration3d());
      break;
    }
    case kForce3D: {
      _this->_internal_mutable_force3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_force3d());
      break;
    }
    case kTorque3D: {
      _this->_internal_mutable_torque3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_torque3d());
      break;
    }
    case kAngularAcceleration3D: {
      _this->_internal_mutable_angularacceleration3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_angularacceleration3d());
      break;
    }
    case kVelocity3D: {
      _this->_internal_mutable_velocity3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_velocity3d());
      break;
    }
    case kAngularVelocity3D: {
      _this->_internal_mutable_angularvelocity3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_angularvelocity3d());
      break;
    }
    case kForce1D: {
      _this->_internal_set_force1d(from._internal_force1d());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorMessage.Sensor)
}

inline void SensorMessage_Sensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

SensorMessage_Sensor::~SensorMessage_Sensor() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorMessage.Sensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMessage_Sensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void SensorMessage_Sensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMessage_Sensor::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:click.protobuf.SensorMessage.Sensor)
  switch (value_case()) {
    case kAngle: {
      // No need to clear
      break;
    }
    case kAngularVelocity1D: {
      // No need to clear
      break;
    }
    case kTorque1D: {
      // No need to clear
      break;
    }
    case kPosition: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.position_;
      }
      break;
    }
    case kRpy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.rpy_;
      }
      break;
    }
    case kActivated: {
      // No need to clear
      break;
    }
    case kAcceleration3D: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.acceleration3d_;
      }
      break;
    }
    case kForce3D: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.force3d_;
      }
      break;
    }
    case kTorque3D: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.torque3d_;
      }
      break;
    }
    case kAngularAcceleration3D: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.angularacceleration3d_;
      }
      break;
    }
    case kVelocity3D: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.velocity3d_;
      }
      break;
    }
    case kAngularVelocity3D: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.angularvelocity3d_;
      }
      break;
    }
    case kForce1D: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void SensorMessage_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorMessage.Sensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage_Sensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set_angle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angularVelocity1d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_angularvelocity1d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double torque1d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_torque1d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 rpy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool activated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_activated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 acceleration3d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 force3d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_force3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 torque3d = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 angularAcceleration3d = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularacceleration3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 velocity3d = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.Vec3 angularVelocity3d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularvelocity3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double force1d = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _internal_set_force1d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage_Sensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorMessage.Sensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (_internal_has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_angle(), target);
  }

  // double angularVelocity1d = 2;
  if (_internal_has_angularvelocity1d()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_angularvelocity1d(), target);
  }

  // double torque1d = 3;
  if (_internal_has_torque1d()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_torque1d(), target);
  }

  // .click.protobuf.SensorMessage.Vec3 position = 4;
  if (_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .click.protobuf.SensorMessage.Vec3 rpy = 5;
  if (_internal_has_rpy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rpy(this),
        _Internal::rpy(this).GetCachedSize(), target, stream);
  }

  // bool activated = 6;
  if (_internal_has_activated()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_activated(), target);
  }

  // .click.protobuf.SensorMessage.Vec3 acceleration3d = 7;
  if (_internal_has_acceleration3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::acceleration3d(this),
        _Internal::acceleration3d(this).GetCachedSize(), target, stream);
  }

  // .click.protobuf.SensorMessage.Vec3 force3d = 8;
  if (_internal_has_force3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::force3d(this),
        _Internal::force3d(this).GetCachedSize(), target, stream);
  }

  // .click.protobuf.SensorMessage.Vec3 torque3d = 9;
  if (_internal_has_torque3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::torque3d(this),
        _Internal::torque3d(this).GetCachedSize(), target, stream);
  }

  // .click.protobuf.SensorMessage.Vec3 angularAcceleration3d = 10;
  if (_internal_has_angularacceleration3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::angularacceleration3d(this),
        _Internal::angularacceleration3d(this).GetCachedSize(), target, stream);
  }

  // .click.protobuf.SensorMessage.Vec3 velocity3d = 12;
  if (_internal_has_velocity3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::velocity3d(this),
        _Internal::velocity3d(this).GetCachedSize(), target, stream);
  }

  // .click.protobuf.SensorMessage.Vec3 angularVelocity3d = 13;
  if (_internal_has_angularvelocity3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::angularvelocity3d(this),
        _Internal::angularvelocity3d(this).GetCachedSize(), target, stream);
  }

  // double force1d = 14;
  if (_internal_has_force1d()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_force1d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorMessage.Sensor)
  return target;
}

size_t SensorMessage_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorMessage.Sensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // double angle = 1;
    case kAngle: {
      total_size += 1 + 8;
      break;
    }
    // double angularVelocity1d = 2;
    case kAngularVelocity1D: {
      total_size += 1 + 8;
      break;
    }
    // double torque1d = 3;
    case kTorque1D: {
      total_size += 1 + 8;
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 position = 4;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.position_);
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 rpy = 5;
    case kRpy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.rpy_);
      break;
    }
    // bool activated = 6;
    case kActivated: {
      total_size += 1 + 1;
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 acceleration3d = 7;
    case kAcceleration3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.acceleration3d_);
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 force3d = 8;
    case kForce3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.force3d_);
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 torque3d = 9;
    case kTorque3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.torque3d_);
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 angularAcceleration3d = 10;
    case kAngularAcceleration3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.angularacceleration3d_);
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 velocity3d = 12;
    case kVelocity3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.velocity3d_);
      break;
    }
    // .click.protobuf.SensorMessage.Vec3 angularVelocity3d = 13;
    case kAngularVelocity3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.angularvelocity3d_);
      break;
    }
    // double force1d = 14;
    case kForce1D: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage_Sensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMessage_Sensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage_Sensor::GetClassData() const { return &_class_data_; }


void SensorMessage_Sensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMessage_Sensor*>(&to_msg);
  auto& from = static_cast<const SensorMessage_Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorMessage.Sensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kAngle: {
      _this->_internal_set_angle(from._internal_angle());
      break;
    }
    case kAngularVelocity1D: {
      _this->_internal_set_angularvelocity1d(from._internal_angularvelocity1d());
      break;
    }
    case kTorque1D: {
      _this->_internal_set_torque1d(from._internal_torque1d());
      break;
    }
    case kPosition: {
      _this->_internal_mutable_position()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_position());
      break;
    }
    case kRpy: {
      _this->_internal_mutable_rpy()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_rpy());
      break;
    }
    case kActivated: {
      _this->_internal_set_activated(from._internal_activated());
      break;
    }
    case kAcceleration3D: {
      _this->_internal_mutable_acceleration3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_acceleration3d());
      break;
    }
    case kForce3D: {
      _this->_internal_mutable_force3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_force3d());
      break;
    }
    case kTorque3D: {
      _this->_internal_mutable_torque3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_torque3d());
      break;
    }
    case kAngularAcceleration3D: {
      _this->_internal_mutable_angularacceleration3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_angularacceleration3d());
      break;
    }
    case kVelocity3D: {
      _this->_internal_mutable_velocity3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_velocity3d());
      break;
    }
    case kAngularVelocity3D: {
      _this->_internal_mutable_angularvelocity3d()->::click::protobuf::SensorMessage_Vec3::MergeFrom(
          from._internal_angularvelocity3d());
      break;
    }
    case kForce1D: {
      _this->_internal_set_force1d(from._internal_force1d());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage_Sensor::CopyFrom(const SensorMessage_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorMessage.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage_Sensor::IsInitialized() const {
  return true;
}

void SensorMessage_Sensor::InternalSwap(SensorMessage_Sensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[15]);
}

// ===================================================================

class SensorMessage_Sensors::_Internal {
 public:
};

SensorMessage_Sensors::SensorMessage_Sensors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorMessage.Sensors)
}
SensorMessage_Sensors::SensorMessage_Sensors(const SensorMessage_Sensors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMessage_Sensors* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_){from._impl_.sensor_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorMessage.Sensors)
}

inline void SensorMessage_Sensors::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMessage_Sensors::~SensorMessage_Sensors() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorMessage.Sensors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMessage_Sensors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_.~RepeatedPtrField();
}

void SensorMessage_Sensors::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMessage_Sensors::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorMessage.Sensors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage_Sensors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .click.protobuf.SensorMessage.Sensor sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage_Sensors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorMessage.Sensors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .click.protobuf.SensorMessage.Sensor sensor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorMessage.Sensors)
  return target;
}

size_t SensorMessage_Sensors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorMessage.Sensors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .click.protobuf.SensorMessage.Sensor sensor = 1;
  total_size += 1UL * this->_internal_sensor_size();
  for (const auto& msg : this->_impl_.sensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage_Sensors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMessage_Sensors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage_Sensors::GetClassData() const { return &_class_data_; }


void SensorMessage_Sensors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMessage_Sensors*>(&to_msg);
  auto& from = static_cast<const SensorMessage_Sensors&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorMessage.Sensors)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensor_.MergeFrom(from._impl_.sensor_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage_Sensors::CopyFrom(const SensorMessage_Sensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorMessage.Sensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage_Sensors::IsInitialized() const {
  return true;
}

void SensorMessage_Sensors::InternalSwap(SensorMessage_Sensors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sensor_.InternalSwap(&other->_impl_.sensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_Sensors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[16]);
}

// ===================================================================

SensorMessage_Object_SensorsEntry_DoNotUse::SensorMessage_Object_SensorsEntry_DoNotUse() {}
SensorMessage_Object_SensorsEntry_DoNotUse::SensorMessage_Object_SensorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SensorMessage_Object_SensorsEntry_DoNotUse::MergeFrom(const SensorMessage_Object_SensorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_Object_SensorsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[17]);
}

// ===================================================================

class SensorMessage_Object::_Internal {
 public:
};

SensorMessage_Object::SensorMessage_Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SensorMessage_Object::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorMessage.Object)
}
SensorMessage_Object::SensorMessage_Object(const SensorMessage_Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMessage_Object* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.anglesensors_){from._impl_.anglesensors_}
    , decltype(_impl_.angularvelocitysensors_){from._impl_.angularvelocitysensors_}
    , decltype(_impl_.torquesensors_){from._impl_.torquesensors_}
    , decltype(_impl_.objectsensors_){from._impl_.objectsensors_}
    , decltype(_impl_.forcesensors_){from._impl_.forcesensors_}
    , /*decltype(_impl_.sensors_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sensors_.MergeFrom(from._impl_.sensors_);
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorMessage.Object)
}

inline void SensorMessage_Object::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.anglesensors_){arena}
    , decltype(_impl_.angularvelocitysensors_){arena}
    , decltype(_impl_.torquesensors_){arena}
    , decltype(_impl_.objectsensors_){arena}
    , decltype(_impl_.forcesensors_){arena}
    , /*decltype(_impl_.sensors_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMessage_Object::~SensorMessage_Object() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorMessage.Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SensorMessage_Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anglesensors_.~RepeatedField();
  _impl_.angularvelocitysensors_.~RepeatedField();
  _impl_.torquesensors_.~RepeatedField();
  _impl_.objectsensors_.~RepeatedPtrField();
  _impl_.forcesensors_.~RepeatedPtrField();
  _impl_.sensors_.Destruct();
  _impl_.sensors_.~MapField();
}

void SensorMessage_Object::ArenaDtor(void* object) {
  SensorMessage_Object* _this = reinterpret_cast< SensorMessage_Object* >(object);
  _this->_impl_.sensors_.Destruct();
}
void SensorMessage_Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMessage_Object::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorMessage.Object)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.anglesensors_.Clear();
  _impl_.angularvelocitysensors_.Clear();
  _impl_.torquesensors_.Clear();
  _impl_.objectsensors_.Clear();
  _impl_.forcesensors_.Clear();
  _impl_.sensors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage_Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double angleSensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_anglesensors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_anglesensors(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double angularVelocitySensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angularvelocitysensors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_angularvelocitysensors(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double torqueSensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_torquesensors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_torquesensors(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .click.protobuf.SensorMessage.Sensor objectSensors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectsensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .click.protobuf.SensorMessage.Vec3 forceSensors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forcesensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .click.protobuf.SensorMessage.Sensors> sensors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sensors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage_Object::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorMessage.Object)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double angleSensors = 1;
  if (this->_internal_anglesensors_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_anglesensors(), target);
  }

  // repeated double angularVelocitySensors = 2;
  if (this->_internal_angularvelocitysensors_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_angularvelocitysensors(), target);
  }

  // repeated double torqueSensors = 3;
  if (this->_internal_torquesensors_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_torquesensors(), target);
  }

  // repeated .click.protobuf.SensorMessage.Sensor objectSensors = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objectsensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_objectsensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .click.protobuf.SensorMessage.Vec3 forceSensors = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forcesensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_forcesensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .click.protobuf.SensorMessage.Sensors> sensors = 6;
  if (!this->_internal_sensors().empty()) {
    using MapType = ::_pb::Map<std::string, ::click::protobuf::SensorMessage_Sensors>;
    using WireHelper = SensorMessage_Object_SensorsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sensors();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.SensorMessage.Object.SensorsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorMessage.Object)
  return target;
}

size_t SensorMessage_Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorMessage.Object)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double angleSensors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anglesensors_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double angularVelocitySensors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angularvelocitysensors_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double torqueSensors = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_torquesensors_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .click.protobuf.SensorMessage.Sensor objectSensors = 4;
  total_size += 1UL * this->_internal_objectsensors_size();
  for (const auto& msg : this->_impl_.objectsensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .click.protobuf.SensorMessage.Vec3 forceSensors = 5;
  total_size += 1UL * this->_internal_forcesensors_size();
  for (const auto& msg : this->_impl_.forcesensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .click.protobuf.SensorMessage.Sensors> sensors = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sensors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::click::protobuf::SensorMessage_Sensors >::const_iterator
      it = this->_internal_sensors().begin();
      it != this->_internal_sensors().end(); ++it) {
    total_size += SensorMessage_Object_SensorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage_Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMessage_Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage_Object::GetClassData() const { return &_class_data_; }


void SensorMessage_Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMessage_Object*>(&to_msg);
  auto& from = static_cast<const SensorMessage_Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorMessage.Object)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.anglesensors_.MergeFrom(from._impl_.anglesensors_);
  _this->_impl_.angularvelocitysensors_.MergeFrom(from._impl_.angularvelocitysensors_);
  _this->_impl_.torquesensors_.MergeFrom(from._impl_.torquesensors_);
  _this->_impl_.objectsensors_.MergeFrom(from._impl_.objectsensors_);
  _this->_impl_.forcesensors_.MergeFrom(from._impl_.forcesensors_);
  _this->_impl_.sensors_.MergeFrom(from._impl_.sensors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage_Object::CopyFrom(const SensorMessage_Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorMessage.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage_Object::IsInitialized() const {
  return true;
}

void SensorMessage_Object::InternalSwap(SensorMessage_Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.anglesensors_.InternalSwap(&other->_impl_.anglesensors_);
  _impl_.angularvelocitysensors_.InternalSwap(&other->_impl_.angularvelocitysensors_);
  _impl_.torquesensors_.InternalSwap(&other->_impl_.torquesensors_);
  _impl_.objectsensors_.InternalSwap(&other->_impl_.objectsensors_);
  _impl_.forcesensors_.InternalSwap(&other->_impl_.forcesensors_);
  _impl_.sensors_.InternalSwap(&other->_impl_.sensors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[18]);
}

// ===================================================================

class SensorMessage_SimulationVariables::_Internal {
 public:
};

SensorMessage_SimulationVariables::SensorMessage_SimulationVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorMessage.SimulationVariables)
}
SensorMessage_SimulationVariables::SensorMessage_SimulationVariables(const SensorMessage_SimulationVariables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMessage_SimulationVariables* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.simulatedtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.simulatedtime_ = from._impl_.simulatedtime_;
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorMessage.SimulationVariables)
}

inline void SensorMessage_SimulationVariables::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.simulatedtime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMessage_SimulationVariables::~SensorMessage_SimulationVariables() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorMessage.SimulationVariables)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMessage_SimulationVariables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorMessage_SimulationVariables::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMessage_SimulationVariables::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorMessage.SimulationVariables)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.simulatedtime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage_SimulationVariables::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double simulatedTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.simulatedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage_SimulationVariables::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorMessage.SimulationVariables)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double simulatedTime = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_simulatedtime = this->_internal_simulatedtime();
  uint64_t raw_simulatedtime;
  memcpy(&raw_simulatedtime, &tmp_simulatedtime, sizeof(tmp_simulatedtime));
  if (raw_simulatedtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_simulatedtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorMessage.SimulationVariables)
  return target;
}

size_t SensorMessage_SimulationVariables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorMessage.SimulationVariables)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double simulatedTime = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_simulatedtime = this->_internal_simulatedtime();
  uint64_t raw_simulatedtime;
  memcpy(&raw_simulatedtime, &tmp_simulatedtime, sizeof(tmp_simulatedtime));
  if (raw_simulatedtime != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage_SimulationVariables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMessage_SimulationVariables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage_SimulationVariables::GetClassData() const { return &_class_data_; }


void SensorMessage_SimulationVariables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMessage_SimulationVariables*>(&to_msg);
  auto& from = static_cast<const SensorMessage_SimulationVariables&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorMessage.SimulationVariables)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_simulatedtime = from._internal_simulatedtime();
  uint64_t raw_simulatedtime;
  memcpy(&raw_simulatedtime, &tmp_simulatedtime, sizeof(tmp_simulatedtime));
  if (raw_simulatedtime != 0) {
    _this->_internal_set_simulatedtime(from._internal_simulatedtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage_SimulationVariables::CopyFrom(const SensorMessage_SimulationVariables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorMessage.SimulationVariables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage_SimulationVariables::IsInitialized() const {
  return true;
}

void SensorMessage_SimulationVariables::InternalSwap(SensorMessage_SimulationVariables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.simulatedtime_, other->_impl_.simulatedtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_SimulationVariables::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[19]);
}

// ===================================================================

SensorMessage_ObjectsEntry_DoNotUse::SensorMessage_ObjectsEntry_DoNotUse() {}
SensorMessage_ObjectsEntry_DoNotUse::SensorMessage_ObjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SensorMessage_ObjectsEntry_DoNotUse::MergeFrom(const SensorMessage_ObjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage_ObjectsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[20]);
}

// ===================================================================

class SensorMessage::_Internal {
 public:
  static const ::click::protobuf::SensorMessage_SimulationVariables& simvars(const SensorMessage* msg);
};

const ::click::protobuf::SensorMessage_SimulationVariables&
SensorMessage::_Internal::simvars(const SensorMessage* msg) {
  return *msg->_impl_.simvars_;
}
SensorMessage::SensorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SensorMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:click.protobuf.SensorMessage)
}
SensorMessage::SensorMessage(const SensorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.objects_)*/{}
    , decltype(_impl_.simvars_){nullptr}
    , decltype(_impl_.messagetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  if (from._internal_has_simvars()) {
    _this->_impl_.simvars_ = new ::click::protobuf::SensorMessage_SimulationVariables(*from._impl_.simvars_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:click.protobuf.SensorMessage)
}

inline void SensorMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.objects_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.simvars_){nullptr}
    , decltype(_impl_.messagetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMessage::~SensorMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.SensorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SensorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.Destruct();
  _impl_.objects_.~MapField();
  if (this != internal_default_instance()) delete _impl_.simvars_;
}

void SensorMessage::ArenaDtor(void* object) {
  SensorMessage* _this = reinterpret_cast< SensorMessage* >(object);
  _this->_impl_.objects_.Destruct();
}
void SensorMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.SensorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.simvars_ != nullptr) {
    delete _impl_.simvars_;
  }
  _impl_.simvars_ = nullptr;
  _impl_.messagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .click.protobuf.SensorMessage.Object> objects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.objects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.SensorMessage.SimulationVariables simVars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simvars(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.SensorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // map<string, .click.protobuf.SensorMessage.Object> objects = 3;
  if (!this->_internal_objects().empty()) {
    using MapType = ::_pb::Map<std::string, ::click::protobuf::SensorMessage_Object>;
    using WireHelper = SensorMessage_ObjectsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_objects();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "click.protobuf.SensorMessage.ObjectsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .click.protobuf.SensorMessage.SimulationVariables simVars = 4;
  if (this->_internal_has_simvars()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::simvars(this),
        _Internal::simvars(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.SensorMessage)
  return target;
}

size_t SensorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.SensorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .click.protobuf.SensorMessage.Object> objects = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_objects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::click::protobuf::SensorMessage_Object >::const_iterator
      it = this->_internal_objects().begin();
      it != this->_internal_objects().end(); ++it) {
    total_size += SensorMessage_ObjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .click.protobuf.SensorMessage.SimulationVariables simVars = 4;
  if (this->_internal_has_simvars()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.simvars_);
  }

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMessage::GetClassData() const { return &_class_data_; }


void SensorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMessage*>(&to_msg);
  auto& from = static_cast<const SensorMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.SensorMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  if (from._internal_has_simvars()) {
    _this->_internal_mutable_simvars()->::click::protobuf::SensorMessage_SimulationVariables::MergeFrom(
        from._internal_simvars());
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMessage::CopyFrom(const SensorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.SensorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMessage::IsInitialized() const {
  return true;
}

void SensorMessage::InternalSwap(SensorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorMessage, _impl_.messagetype_)
      + sizeof(SensorMessage::_impl_.messagetype_)
      - PROTOBUF_FIELD_OFFSET(SensorMessage, _impl_.simvars_)>(
          reinterpret_cast<char*>(&_impl_.simvars_),
          reinterpret_cast<char*>(&other->_impl_.simvars_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[21]);
}

// ===================================================================

class ResetMessage::_Internal {
 public:
};

ResetMessage::ResetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.ResetMessage)
}
ResetMessage::ResetMessage(const ResetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:click.protobuf.ResetMessage)
}

inline void ResetMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResetMessage::~ResetMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.ResetMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResetMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.ResetMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.ResetMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.ResetMessage)
  return target;
}

size_t ResetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.ResetMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetMessage::GetClassData() const { return &_class_data_; }


void ResetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetMessage*>(&to_msg);
  auto& from = static_cast<const ResetMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.ResetMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetMessage::CopyFrom(const ResetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.ResetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetMessage::IsInitialized() const {
  return true;
}

void ResetMessage::InternalSwap(ResetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[22]);
}

// ===================================================================

class ErrorMessage::_Internal {
 public:
};

ErrorMessage::ErrorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:click.protobuf.ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errormessage_){}
    , decltype(_impl_.messagetype_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormessage().empty()) {
    _this->_impl_.errormessage_.Set(from._internal_errormessage(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.messagetype_, &from._impl_.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:click.protobuf.ErrorMessage)
}

inline void ErrorMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errormessage_){}
    , decltype(_impl_.messagetype_){0}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:click.protobuf.ErrorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormessage_.Destroy();
}

void ErrorMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:click.protobuf.ErrorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errormessage_.ClearToEmpty();
  ::memset(&_impl_.messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .click.protobuf.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::click::protobuf::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .click.protobuf.ErrorType error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::click::protobuf::ErrorType>(val));
        } else
          goto handle_unusual;
        continue;
      // string errormessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "click.protobuf.ErrorMessage.errormessage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:click.protobuf.ErrorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // .click.protobuf.ErrorType error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // string errormessage = 3;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "click.protobuf.ErrorMessage.errormessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click.protobuf.ErrorMessage)
  return target;
}

size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click.protobuf.ErrorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errormessage = 3;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // .click.protobuf.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // .click.protobuf.ErrorType error = 2;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorMessage::GetClassData() const { return &_class_data_; }


void ErrorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorMessage*>(&to_msg);
  auto& from = static_cast<const ErrorMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:click.protobuf.ErrorMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormessage().empty()) {
    _this->_internal_set_errormessage(from._internal_errormessage());
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click.protobuf.ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  return true;
}

void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormessage_, lhs_arena,
      &other->_impl_.errormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorMessage, _impl_.error_)
      + sizeof(ErrorMessage::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(ErrorMessage, _impl_.messagetype_)>(
          reinterpret_cast<char*>(&_impl_.messagetype_),
          reinterpret_cast<char*>(&other->_impl_.messagetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messaging_2eproto_getter, &descriptor_table_Messaging_2eproto_once,
      file_level_metadata_Messaging_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace click
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::click::protobuf::Message*
Arena::CreateMaybeMessage< ::click::protobuf::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeInitMessage*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeInitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorRequestMessage*
Arena::CreateMaybeMessage< ::click::protobuf::SensorRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage_Sensors*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage_Sensors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage_Sensors >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage_Object_ControlEventsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage_Object_SensorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage_Object*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage_Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage_Object >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage_SimulationSettings*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage_SimulationSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage_SimulationSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage_ObjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::HandshakeMessage*
Arena::CreateMaybeMessage< ::click::protobuf::HandshakeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::HandshakeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::ControlMessage_Object_ControlEventsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::ControlMessage_Object*
Arena::CreateMaybeMessage< ::click::protobuf::ControlMessage_Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::ControlMessage_Object >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::ControlMessage_ObjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::ControlMessage*
Arena::CreateMaybeMessage< ::click::protobuf::ControlMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::ControlMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_Vec3*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_Sensor*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_Sensors*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_Sensors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_Sensors >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_Object_SensorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_Object*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_Object >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_SimulationVariables*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_SimulationVariables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_SimulationVariables >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage_ObjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::SensorMessage*
Arena::CreateMaybeMessage< ::click::protobuf::SensorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::SensorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::ResetMessage*
Arena::CreateMaybeMessage< ::click::protobuf::ResetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::ResetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::click::protobuf::ErrorMessage*
Arena::CreateMaybeMessage< ::click::protobuf::ErrorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::click::protobuf::ErrorMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
